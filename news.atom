<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.cdi-spec.org/</id>
  <title>Contexts and Dependency Injection</title>
  <updated>2020-09-18T09:00:18+02:00</updated>
  <link href="http://www.cdi-spec.org/news.atom" rel="self" type="application/atom+xml" />
  <link href="http://www.cdi-spec.org/" rel="alternate" type="text/html" />
  <entry>
    <id>http://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension.html</id>
    <title>Build Compatible Extensions Proposal</title>
    <updated>2020-09-18T09:00:18+02:00</updated>
    <published>2020-09-15T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension.html" rel="alternate" type="text/html" />
    <category term="Proposal"></category>
    <summary>
      A few months back we shared our vision for CDI lite.
      In short, the goal with CDI lite is to make the spec lighter, cloud-friendlier and allow for build-time implementations which are now on the rise.
      
      
      When we started thinking about a “lite” variant of CDI, amenable to build-time processing, we understood that an alternative to Portable Extensions is necessary. Subsequent discussion on the MicroProfile mailing list confirmed that.
      
      
      We explored several variants of how the API might look like. This blog post shows one that, we believe, has the most potential. We call it Build Compatible Extensions, but the name, as everything...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A few months back we shared our vision for CDI lite.
      In short, the goal with CDI lite is to make the spec lighter, cloud-friendlier and allow for build-time implementations which are now on the rise.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When we started thinking about a “lite” variant of CDI, amenable to build-time processing, we understood that an alternative to Portable Extensions is necessary. Subsequent discussion on the MicroProfile mailing list confirmed that.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We explored several variants of how the API might look like. This blog post shows one that, we believe, has the most potential. We call it &lt;em&gt;Build Compatible Extensions&lt;/em&gt;, but the name, as everything else described here, is up for debate.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For our explorations of the API design space, we mostly constrained ourselves to one particularly common use case: annotation transformations. Many things that Portable Extensions allow can be achieved simply by adding an annotation here or removing an annotation there. We know that other transformations are necessary, but the API for annotation transformation is the most developed proposal we have. The other ones are significantly more rough, so bear with us please and submit feedback!
      You can do that in form of a GitHub issue against the &lt;a href=&quot;https://github.com/eclipse-ee4j/cdi/issues&quot;&gt;CDI repository&lt;/a&gt; and add the &lt;code&gt;lite-extension-api&lt;/code&gt; label to your issue.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before we start, we’d also like to note that in this text, we assume the reader (that is, you!) is familiar with CDI and preferably also Portable Extensions, as we expect some knowledge and don’t explain everything. We also make references to Portable Extensions on several occasions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;extensions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#extensions&quot; /&gt;Extensions&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In our proposal, Build Compatible Extensions are simply methods annotated with an &lt;em&gt;extension annotation&lt;/em&gt;. Extension annotations correspond to phases in which extensions are processed. There are 4 phases:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;@Discovery&lt;/strong&gt;: adding classes to application, registering custom contexts&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;@Enhancement&lt;/strong&gt;: transforming annotations&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;@Synthesis&lt;/strong&gt;: registering synthetic beans and observers&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;@Validation&lt;/strong&gt;: performing custom validation&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are some constraints we put on these methods (such as: they must be &lt;code&gt;public&lt;/code&gt;), but they should be pretty obvious and shouldn’t be limiting anyone. The container automatically finds extensions and invokes them when time is right.
      When exactly are the extensions invoked can’t be defined in too much detail, because we want implementations to be able to invoke them at build time (e.g. during application compilation) or runtime (e.g. during application deployment). It certainly happens before the application starts. Extensions in earlier phases are guaranteed to run before extensions in later phases.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Extensions can declare an arbitrary number of parameters, all of which are supplied by the container. There’s a set of predefined types of parameters for each phase, and all implementations would have to support that. We’re also thinking of designing an SPI that would allow anyone to contribute support for other types of parameters.
      A class can declare multiple extension methods, in which case they are all invoked on a single instance of the class. If you need to control order of extension invocations, there’s an annotation &lt;strong&gt;&lt;code&gt;@ExtensionPriority&lt;/code&gt;&lt;/strong&gt; just for that.
      This is a lot of text already, so let’s take a look at an example:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MyExtension {
          @Enhancement
          public void doSomething() {
              System.out.println(&quot;This is an extension, yay!&quot;);
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This doesn’t really do anything, just prints a message whenever the extension is executed. Let’s create something more interesting. Say, moving a qualifier annotation from one class to another. Let’s assume that we have these classes in our application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;a-qualifier-annotation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-qualifier-annotation&quot; /&gt;A qualifier annotation:&lt;/h3&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Qualifier
      @Retention(RUNTIME)
      @interface MyQualifier {
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;a-service-interface&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-service-interface&quot; /&gt;A service interface:&lt;/h3&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;interface MyService {
          String hello();
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;two-implementations-one-with-qualifier-and-the-other-unqualified&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#two-implementations-one-with-qualifier-and-the-other-unqualified&quot; /&gt;Two implementations, one with qualifier and the other unqualified:&lt;/h3&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Singleton
      @MyQualifier
      class MyFooService implements MyService {
      	    @Override
      	    public String hello() {
      	    	    return &quot;foo&quot;;
      	    }
      }
      
      @Singleton
      class MyBarService implements MyService {
          @Override
      	    public String hello() {
      	    	    return &quot;bar&quot;;
      	    }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;a-class-that-uses-the-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-class-that-uses-the-service&quot; /&gt;A class that uses the service&lt;/h3&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Singleton
      class MyServiceUser {
      	    @Inject
      	    @MyQualifier
      	    MyService myService;
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here, it’s pretty clear that when the CDI container instantiates the &lt;code&gt;MyServiceUser&lt;/code&gt; class, it will inject a &lt;code&gt;MyFooService&lt;/code&gt; into the &lt;code&gt;myService&lt;/code&gt; field.
      With a simple Build Compatible Extension, we can “transfer” the qualifier annotation from &lt;code&gt;MyFooService&lt;/code&gt; to &lt;code&gt;MyBarService&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class MyExtension {
          @Enhancement
          public void configure(ClassConfig&amp;lt;MyFooService&amp;gt; foo,
                                ClassConfig&amp;lt;MyBarService&amp;gt; bar) {
              foo.removeAnnotation(it -&amp;gt; it.name()
                  .equals(MyQualifier.class.getName()));
              bar.addAnnotation(MyQualifier.class);
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I’m sure you understand the extension pretty well already: with this extension present in the application, the CDI container will consider the &lt;code&gt;MyFooService&lt;/code&gt; &lt;em&gt;not&lt;/em&gt; annotated &lt;code&gt;@MyQualifier&lt;/code&gt;, and at the same time, it will consider the &lt;code&gt;MyBarService&lt;/code&gt; annotated &lt;code&gt;@MyQualifier&lt;/code&gt;. In the end, &lt;code&gt;MyServiceUser.myService&lt;/code&gt; will no longer hold a &lt;code&gt;MyFooService&lt;/code&gt;; it will hold a &lt;code&gt;MyBarService&lt;/code&gt; instead.  We have successfully “moved” an annotation from one class to another, thereby altering how the CDI container behaves.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is a very simple example, but using the exact same API, one can achieve many things. For example, if the CDI container doesn’t treat all classes as beans (in CDI Lite, this isn’t required), all it takes to create a bean out of a class is just adding a bean defining annotation:
      &lt;code&gt;myClass.addAnnotation(Singleton.class);&lt;/code&gt;
      To “veto” a class, again, just add an annotation:
      &lt;code&gt;myClass.addAnnotation(Vetoed.class);&lt;/code&gt;
      Etc. etc. etc.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;extension-parameters&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#extension-parameters&quot; /&gt;Extension parameters&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;By now, you should have a general idea of how extensions look like. If you want to know the gory details, read on – but be warned, this is going to be long. You might want to skip directly to the conclusion at the end.
      Still here? Good! As we said above, an extension can declare an arbitrary number of parameters. The parameters are where extensions become interesting, so let’s describe in detail which parameters can extensions declare.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;code-discovery-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#code-discovery-code&quot; /&gt;&lt;code&gt;@Discovery&lt;/code&gt;&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Just two parameters are possible: &lt;code&gt;AppArchiveBuilder&lt;/code&gt; to register custom classes so that the CDI container treats them as part of the application, and &lt;code&gt;Contexts&lt;/code&gt; to register custom contexts.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;code-enhancement-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#code-enhancement-code&quot; /&gt;&lt;code&gt;@Enhancement&lt;/code&gt;&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As mentioned above, we have focused mostly on this phase. Therefore, we have a pretty elaborate API which allows inspecting and modifying the application’s annotations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;inspecting-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#inspecting-code&quot; /&gt;Inspecting code&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can look at all the classes, methods and fields in an application, and make decisions based on your findings. For that, an extension can declare parameters of these types:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;ClassInfo&amp;lt;MyService&amp;gt;&lt;/code&gt;: to look at one particular class&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;ClassInfo&amp;lt;? extends MyService&amp;gt;&amp;gt;&lt;/code&gt;: to look at all subclasses&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;ClassInfo&amp;lt;? super MyService&amp;gt;&amp;gt;&lt;/code&gt;: to look at all superclasses&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;ClassInfo&amp;lt;?&amp;gt;&amp;gt;&lt;/code&gt;: to look at all classes&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;MethodInfo&amp;lt;MyService&amp;gt;&amp;gt;&lt;/code&gt;: to look at all methods declared on one class&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;MethodInfo&amp;lt;? extends MyService&amp;gt;&amp;gt;&lt;/code&gt;: to look at all methods declared on all subclasses&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;MethodInfo&amp;lt;? super MyService&amp;gt;&amp;gt;&lt;/code&gt;: to look at all methods declared on all superclasses&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;MethodInfo&amp;lt;?&amp;gt;&amp;gt;&lt;/code&gt;: to look at all methods declared on all classes&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;FieldInfo&amp;lt;MyService&amp;gt;&amp;gt;&lt;/code&gt;: to look at all fields declared on one class&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;FieldInfo&amp;lt;? extends MyService&amp;gt;&amp;gt;&lt;/code&gt;: to look at all fields declared on all subclasses&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;FieldInfo&amp;lt;? super MyService&amp;gt;&amp;gt;&lt;/code&gt;: to look at all fields declared on all superclasses&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;Collection&amp;lt;FieldInfo&amp;lt;?&amp;gt;&amp;gt;&lt;/code&gt;: to look at all fields declared on all classes&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Such parameters can also be annotated &lt;code&gt;@WithAnnotations&lt;/code&gt;, in which case, only those classes/methods/fields annotated with given annotations will be provided.
      The &lt;code&gt;ClassInfo&lt;/code&gt;, &lt;code&gt;MethodInfo&lt;/code&gt; and &lt;code&gt;FieldInfo&lt;/code&gt; types give you visibility into all interesting details about given declarations. You can drill down to method parameters, their types, annotations, and so on.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;the-new-metamodel&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-new-metamodel&quot; /&gt;The new metamodel&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Actually, let’s take a small detour to explain these &lt;code&gt;ClassInfo&lt;/code&gt;, &lt;code&gt;MethodInfo&lt;/code&gt; and &lt;code&gt;FieldInfo&lt;/code&gt; types, because they totally deserve it.
      You will note that they are actually very similar to the Java Reflection API. However, they do not rely on the Reflection API in any way, unlike the types in Portable Extensions. This is an important goal of the entire CDI Lite effort: make it possible to implement CDI completely at build time. To that end, we designed a completely new metamodel for Java classes, which can be implemented solely on top of Java bytecode.
      The type hierarchy looks like this: at the top, there’s an &lt;code&gt;AnnotationTarget&lt;/code&gt;. That’s basically anything that can be annotated. In Java, this means &lt;em&gt;declarations&lt;/em&gt;, such as classes or methods, and &lt;em&gt;types&lt;/em&gt;, such as a type of a method parameter. The &lt;code&gt;AnnotationTarget&lt;/code&gt; lets you look at its annotations using these 4 methods:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;boolean hasAnnotation(Class&amp;lt;? extends Annotation&amp;gt; annotationType);
      AnnotationInfo annotation(Class&amp;lt;? extends Annotation&amp;gt; annotationType);
      Collection&amp;lt;AnnotationInfo&amp;gt; repeatableAnnotation(
              Class&amp;lt;? extends Annotation&amp;gt; annotationType);
      Collection&amp;lt;AnnotationInfo&amp;gt; annotations();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The method &lt;code&gt;hasAnnotation(...)&lt;/code&gt; returns whether a given annotation target (such as a class) has an annotation of given type. The &lt;code&gt;annotation(...)&lt;/code&gt; method returns information about an annotation of a given type present on a given target (we’ll see more about &lt;code&gt;AnnotationInfo&lt;/code&gt; soon). The &lt;code&gt;repeatableAnnotation(...)&lt;/code&gt; method returns all annotations of a given repeatable annotation type, and finally the &lt;code&gt;annotations()&lt;/code&gt; method returns all annotations present on a given target.
      Let’s stop for a short example. Let’s say we have a &lt;code&gt;ClassInfo&lt;/code&gt; for the &lt;code&gt;MyServiceUser&lt;/code&gt; class, which we’ve seen in the previous example. We can do all kinds of interesting things with it, but here, let’s just check if the class has a &lt;code&gt;@Singleton&lt;/code&gt; annotation, and if so, print all annotations on all fields annotated &lt;code&gt;@Inject&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;ClassInfo&amp;lt;MyServiceUser&amp;gt; clazz = ...;
      if (clazz.hasAnnotation(Singleton.class)) { // we know this is true
          for (FieldInfo&amp;lt;MyServiceUser&amp;gt; field : clazz.fields()) {
              if (field.hasAnnotation(Inject.class)) {
                  field.annotations().forEach(System.out::println);
              }
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You might have noticed that the &lt;code&gt;ClassInfo&lt;/code&gt;, &lt;code&gt;MethodInfo&lt;/code&gt; and &lt;code&gt;FieldInfo&lt;/code&gt; types have a type parameter. This is only useful when declaring an extension parameter – there, it expresses a query (such as: give me all fields declared on all subclasses of &lt;code&gt;MyService&lt;/code&gt;). In all other cases, it can be pretty much ignored.
      Short tour through the &lt;code&gt;AnnotationInfo&lt;/code&gt; type: you can access the &lt;code&gt;target()&lt;/code&gt; of the annotation, as well as the annotation &lt;code&gt;declaration()&lt;/code&gt;, and you can see the annotation attributes using the &lt;code&gt;hasAttribute(String)&lt;/code&gt; and &lt;code&gt;attribute(String)&lt;/code&gt; methods. Given that an attribute named &lt;code&gt;value&lt;/code&gt; is particularly common, there’s also &lt;code&gt;hasValue()&lt;/code&gt; and &lt;code&gt;value()&lt;/code&gt;. And finally, there’s &lt;code&gt;attributes()&lt;/code&gt; to access all annotation attributes at once. Annotation attributes are represented by the &lt;code&gt;AnnotationAttribute&lt;/code&gt; interface, which has a &lt;code&gt;name()&lt;/code&gt; and a &lt;code&gt;value()&lt;/code&gt;. The attribute value is represented by &lt;code&gt;AnnotationAttributeValue&lt;/code&gt;, which allows figuring out the actual type of the value, as well as obtaining its representation as an ordinary Java type.
      As mentioned above, there are two kinds of &lt;code&gt;AnnotationTarget`s: declarations and types. Therefore, we have `DeclarationInfo&lt;/code&gt; as the top-level type for representing Java declarations, and &lt;code&gt;Type&lt;/code&gt; as the top-level type for representing Java types. To distinguish between them, the &lt;code&gt;AnnotationTarget&lt;/code&gt; interface has 4 methods:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;boolean isDeclaration();
      boolean isType();
      DeclarationInfo asDeclaration();
      Type asType();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;code&gt;boolean&lt;/code&gt;-returning methods return whether a given annotation target is a declaration or a type, and the remaining two methods cast to the corresponding type (or throw an exception). You can find similar methods on &lt;code&gt;DeclarationInfo&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, for various kinds of declarations and types (for example, &lt;code&gt;DeclarationInfo&lt;/code&gt; has &lt;code&gt;isClass()&lt;/code&gt;, &lt;code&gt;asClass()&lt;/code&gt; and others).
      We represent 4 kinds of Java declarations in the new metamodel: classes, methods (including constructors), method parameters, and fields. We’re thinking about if it’s worth adding a representation for packages, given that they can also be annotated (using &lt;code&gt;package-info.java&lt;/code&gt;). Any opinion here is welcome!
      Classes are represented by &lt;code&gt;ClassInfo&lt;/code&gt;, which gives access to the &lt;code&gt;name()&lt;/code&gt;, &lt;code&gt;superClass()&lt;/code&gt;, all implemented &lt;code&gt;superInterfaces()&lt;/code&gt;, all &lt;code&gt;typeParameters()&lt;/code&gt;, and most importantly, all &lt;code&gt;constructors()&lt;/code&gt;, &lt;code&gt;methods()&lt;/code&gt; and &lt;code&gt;fields()&lt;/code&gt;.
      Constructors and methods are represented by &lt;code&gt;MethodInfo&lt;/code&gt;, which gives access to the &lt;code&gt;name()&lt;/code&gt;, &lt;code&gt;parameters()&lt;/code&gt;, &lt;code&gt;returnType()&lt;/code&gt; and also &lt;code&gt;typeParameters()&lt;/code&gt;.
      Method parameters are represented by &lt;code&gt;ParameterInfo&lt;/code&gt;, which gives access to the &lt;code&gt;name()&lt;/code&gt;, if it’s present (remember that parameter names don’t have to be present in bytecode!), and the &lt;code&gt;type()&lt;/code&gt;.
      Finally, fields are represented by &lt;code&gt;FieldInfo&lt;/code&gt;, which gives access to &lt;code&gt;name()&lt;/code&gt; and &lt;code&gt;type()&lt;/code&gt;.
      As you’ve surely noticed, we can often get hold of a type of something (method return type, field type, etc.). That’s a second kind of &lt;code&gt;AnnotationTarget&lt;/code&gt;. As we’ve mentioned, the top-level representation of types is the &lt;code&gt;Type&lt;/code&gt; interface, and there are 7 kinds of types: &lt;code&gt;VoidType&lt;/code&gt;, &lt;code&gt;PrimitiveType&lt;/code&gt;, &lt;code&gt;ClassType&lt;/code&gt;, &lt;code&gt;ArrayType&lt;/code&gt;, &lt;code&gt;ParameterizedType&lt;/code&gt;, &lt;code&gt;TypeVariable&lt;/code&gt; and &lt;code&gt;WildcardType&lt;/code&gt;. We won’t go into details about these, as the text is already getting rather long.
      Instead, let’s get back to extension parameters!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;modifying-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#modifying-code&quot; /&gt;Modifying code&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Not only can you look at classes, methods and fields in your extension, you can also modify them. These modifications include adding and removing annotations, and are only considered by the CDI container. That is, the rest of the application will &lt;em&gt;not&lt;/em&gt; see these modifications!
      For each parameter type mentioned above, such as &lt;code&gt;ClassInfo&amp;lt;MyService&amp;gt;&lt;/code&gt; or &lt;code&gt;Collection&amp;lt;MethodInfo&amp;lt;? extends MyService&amp;gt;&amp;gt;&lt;/code&gt;, you can also declare a parameter of the corresponding &lt;code&gt;*Config&lt;/code&gt; type: &lt;code&gt;ClassConfig&amp;lt;MyService&amp;gt;&lt;/code&gt;, &lt;code&gt;Collection&amp;lt;MethodConfig&amp;lt;? extends MyService&amp;gt;&amp;gt;&lt;/code&gt; etc.
      Again you can use &lt;code&gt;@WithAnnotations&lt;/code&gt; to narrow down the set of provided objects. Also, &lt;code&gt;ClassConfig&lt;/code&gt; is actually a subtype of &lt;code&gt;ClassInfo&lt;/code&gt;, so if you need to check a class before you configure it, having a &lt;code&gt;ClassConfig&lt;/code&gt; is enough. &lt;code&gt;MethodConfig&lt;/code&gt; and &lt;code&gt;FieldConfig&lt;/code&gt; are similar.
      The annotation configuration methods provided by these types are:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;void addAnnotation(Class&amp;lt;? extends Annotation&amp;gt; clazz,
                         AnnotationAttribute... attributes);
      void addAnnotation(ClassInfo&amp;lt;?&amp;gt; clazz,
                         AnnotationAttribute... attributes);
      void addAnnotation(AnnotationInfo annotation);
      void addAnnotation(Annotation annotation);
      void removeAnnotation(Predicate&amp;lt;AnnotationInfo&amp;gt; predicate);
      void removeAllAnnotations();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While technically, we could do with just 2 methods, one for adding and one for removing annotations, we decided to have 6 of them to give extension implementations more flexibility. For example, you can use `AnnotationLiteral`s when adding an annotation, similarly to Portable Extensions, but you don’t have to.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;other-types&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#other-types&quot; /&gt;Other types&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While it’s possible to declare a parameter of type &lt;code&gt;Collection&amp;lt;ClassInfo&amp;lt;?&amp;gt;&amp;gt;&lt;/code&gt;, it’s very likely that you don’t want to do this. It’s a sign that you need to do a more elaborate processing, for which the simple declarative API is not powerful enough. Luckily, we have an imperative entrypoint as well: &lt;code&gt;AppArchive&lt;/code&gt;. With this, you can programmatically construct queries to find classes, methods and fields. If you also want to configure the classes, methods or fields, you can use &lt;code&gt;AppArchiveConfig&lt;/code&gt;, which extends &lt;code&gt;AppArchive&lt;/code&gt;. For example:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MyExtension {
          @Enhancement
          public void configure(AppArchiveConfig app) {
              app.classes()
                  .subtypeOf(MyService.class)
                  .configure()
                  .stream()
                  .filter(it -&amp;gt; !it.hasAnnotation(MyAnnotation.class))
                  .forEach(it -&amp;gt; it.addAnnotation(MyAnnotation.class));
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Again, you can search for classes, methods and fields, based on where they are declared or what annotations they have. For classes, &lt;code&gt;AppArchive&lt;/code&gt; gives you access to a collection of &lt;code&gt;ClassInfo&lt;/code&gt; and &lt;code&gt;AppArchiveConfig&lt;/code&gt; gives you access to a collection of &lt;code&gt;ClassConfig&lt;/code&gt;. Similarly for methods and fields.
      Above, we have seen a simple way of adding annotations. There are more elaborate ways for advanced use cases, for which you need to create instances of &lt;code&gt;AnnotationAttribute&lt;/code&gt; or &lt;code&gt;AnnotationAttributeValue&lt;/code&gt;. In such a case, an extension can declare a parameter of type &lt;code&gt;Annotations&lt;/code&gt;, which is essentially a factory for these types.
      Similarly, you can declare a parameter of type &lt;code&gt;Types&lt;/code&gt;, which serves as a factory for instances of &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;synthesis&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#synthesis&quot; /&gt;@Synthesis&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The most important parameter type you can declare for extensions in this phase is &lt;code&gt;SyntheticComponents&lt;/code&gt;. It allows you to register synthetic beans and observers. Note that this API has one significant unsolved problem: how to define the construction and destruction function for synthetic beans, or the observer function for synthetic observers. This needs to work at build time, so we’re entering the realm of bytecode generation and similar fun topics. We have some ideas here, and we’ll work on adding them to the API proposal.
      You can also declare all the parameters that give you access to &lt;code&gt;ClassInfo&lt;/code&gt;, &lt;code&gt;MethodInfo&lt;/code&gt; and &lt;code&gt;FieldInfo&lt;/code&gt;, as described above, including &lt;code&gt;AppArchive&lt;/code&gt;. What’s more interesting, you can also inspect existing beans and observers in the application. This is very similar to inspecting classes, methods and fields, so let’s take it quickly.
      You can declare a parameter of type &lt;code&gt;Collection&amp;lt;BeanInfo&amp;lt;? super MyService&amp;gt;&amp;gt;&lt;/code&gt; to obtain information about all beans in the application that have &lt;code&gt;MyService&lt;/code&gt; or any of its supertypes as one of the bean types. (Note that this example is not very useful, as &lt;code&gt;Object&lt;/code&gt; is one of the supertypes of &lt;code&gt;MyService&lt;/code&gt;, and all beans typically have &lt;code&gt;Object&lt;/code&gt; as one of their types.) Similarly, you can declare a parameter of type &lt;code&gt;Collection&amp;lt;ObserverInfo&amp;lt;? extends MyEvent&amp;gt;&amp;gt;&lt;/code&gt; to obtain information about all observers in the application that observe &lt;code&gt;MyEvent&lt;/code&gt; or any of its subtypes. All the other combinations are of course also possible, and if that is not enough, there’s &lt;code&gt;AppDeployment&lt;/code&gt;, which gives you more powerful querying features, similarly to &lt;code&gt;AppArchive&lt;/code&gt;. You can find beans based on their scope, types, qualifiers, or the declaring class. Similarly with observers, you can filter on the observed type, qualifiers, or the declaring class.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;validation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#validation&quot; /&gt;@Validation&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The most important parameter type you can declare for extensions in this phase is &lt;code&gt;Errors&lt;/code&gt;. It allows you to add custom validation errors.
      What can you validate? Pretty much anything. You can get access to classes, methods and fields, just like in the &lt;code&gt;@Enhancement&lt;/code&gt; phase, and you can also get access to beans and observers, just like in the &lt;code&gt;@Synthesis&lt;/code&gt; phase. This includes both the &lt;code&gt;Collection&amp;lt;SomethingInfo&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; approach, and &lt;code&gt;AppArchive&lt;/code&gt; / &lt;code&gt;AppDeployment&lt;/code&gt; way.
      Error messages can be simple &lt;code&gt;String`s, optionally accompanied by a `DeclarationInfo&lt;/code&gt;, &lt;code&gt;BeanInfo&lt;/code&gt; or &lt;code&gt;ObserverInfo&lt;/code&gt;, or arbitrary `Exception`s.
      In case a validation error is added, the container will prevent the application from successfully deploying (or even building, in case of build time implementations).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot; /&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You have just finished a deep dive into our current Build Compatible Extensions API proposal.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Together with the API proposal, we also developed a proof-of-concept implementation in Quarkus, so that we know this API can be implemented, and that it is indeed build-time compatible. This proof of concept focuses solely on the &lt;code&gt;@Enhancement&lt;/code&gt; phase, but that should be enough for now.  It’s also worth noting that there is nothing Quarkus specific about the API. We believe (and our goal) is that any CDI-Lite implementation could adopt it using a variety of implementation strategies.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We’re publishing the Quarkus fork in the form of a GitHub repository so that you can also experiment with it. Please bear in mind that the POC implementation is very rough and definitely is not production ready. It should be enough to evaluate the API proposal, though. Here’s how you can get your hands on it:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;git clone https://github.com/Ladicek/quarkus-fork.git
      cd quarkus-fork
      git checkout experiment-cdi-lite-ext
      ./mvnw -Dquickly&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Wait a few minutes or more, depending on how many Quarkus dependencies you already have in your local Maven repository. When the build finishes, you can add a dependency on &lt;code&gt;io.quarkus.arc:cdi-lite-ext-api:999-SNAPSHOT&lt;/code&gt; to your project and play. Don’t forget to also bump other Quarkus dependencies, as well as the Quarkus Maven plugin, to &lt;code&gt;999-SNAPSHOT&lt;/code&gt;!
      As mentioned before, we are very keen on hearing your feedback. Please file issues in the &lt;a href=&quot;https://github.com/eclipse-ee4j/cdi/issues&quot;&gt;CDI GitHub repository&lt;/a&gt; with label &lt;code&gt;lite-extension-api&lt;/code&gt;. Let’s work together on making these new Build Compatible Extensions a reality!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future.html</id>
    <title>CDI for the future</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2020-03-09T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future.html" rel="alternate" type="text/html" />
    <category term="Proposal"></category>
    <summary>
      A few months  ago, CDI turned 10! Yes, CDI 1.0 was released 10 years ago and is today one of the most successful specifications in Java EE and now Jakarta EE. Providing a very efficient programming model and elegant means to integrate with 3rd party technology it rapidly became the Java EE cornerstone. As other specifications were adopting its programming model, CDI brought a unified way to write Java EE code and made the platform more consistent than before. So when MicroProfile was launched nearly four years ago, it was obvious that CDI should be part of the core...
    </summary>
    <content type="html">
      &lt;div class=&quot;imageblock&quot; style=&quot;float: right&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://www.cdi-spec.org/images/inside_quark_web.jpg&quot; alt=&quot;inside quark web&quot; width=&quot;285&quot;&gt;
      &lt;/img&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A few months  ago, CDI turned 10! Yes, CDI 1.0 was released 10 years ago and is today one of the most successful specifications in Java EE and now Jakarta EE. Providing a very efficient programming model and elegant means to integrate with 3rd party technology it rapidly became the Java EE cornerstone. As other specifications were adopting its programming model, CDI brought a unified way to write Java EE code and made the platform more consistent than before. So when MicroProfile was launched nearly four years ago, it was obvious that CDI should be part of the core platform along with JAX-RS and JSON-P. Today, MicroProfile programming model relies deeply on CDI and the platform success is partly due to the consistency CDI brings to developer experience.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Yet, CDI was designed more than 10 years ago at a time when monolithic applications were deployed as ears and wars sharing a highly dynamic yet monolithic application server. Things have changed, where containers are immutable, obviating the need for hot redeploy and dynamic discovery, and aspects that we used to rely on traditional application servers for, such as availability and redundancy are now handled using cloud orchestration with kubernetes. We also have seen a shift from monolithic apps to a greater emphasis on decoupling and resilience through microservices.  These factors have given rise to the “single app stack”, where the framework and the application are fused as one.  With traditional application servers,  applications had to be dynamic &lt;strong&gt;because&lt;/strong&gt; they needed to differentiate their needs on shared application server infrastructure, where configuration and resources applied equally to all applications. With single application stacks, applications can express their needs more statically because they are scoped to a single application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, today’s deployments require increasing efficiency to achieve cost reduction, whether deploying to cloud providers or in-house virtualized data centers. A single application server instance  is often replaced by a dozen microservice “single-app stack”  instances, with double or triple that amount to achieve redundancy. CDI, as it is today, is not suited for this cloud ready approach. Some of its features imply a rather heavy resource consumption (both boot-time and memory usage) in its implementations.&lt;br&gt;
      This blog post covers some of my CDI vision for the future to make the specification relevant for the next 10 years.&lt;/br&gt;
      &lt;/p&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;how-to-make-cdi-cloud-ready&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-make-cdi-cloud-ready&quot; /&gt;How to make CDI cloud ready?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If we want to make CDI a cloud ready specification we have to look into all of its requirements that impact memory, cpu, and more broadly performance. As part of that we should revisit which capabilities and features are still required, since as mentioned above application architecture and deployment environments have changed significantly over the years. Although, that alone is not enough, we need to ensure CDI is flexible and adaptable enough to allow for innovative implementation approaches, such as build-time injection wiring.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Of course, It should be possible to implement runtime-based approaches in a more efficient manner, and in many ways these goals are complimentary.  One example of this is overly aggressive bean discovery and thus the extensive type scanning required by CDI during initialization.  While bean discovery allows seamless integration in that 3rd party non-CDI classes can be discovered as bean, storing state and generating events on classes which were never intended to be a bean is very costly. That’s the reason why, when we introduced CDI for Java SE in CDI 2.0, we provided a way to disable &lt;a href=&quot;https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#se_container_initializer&quot;&gt;bean discovery&lt;/a&gt; and let the developers explicitly declare classes that should become beans or allow the creation of synthetic beans before launching the container.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;eclipse-microprofile-challenges&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#eclipse-microprofile-challenges&quot; /&gt;Eclipse MicroProfile Challenges&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The CDI spec was originally written with Jakarta EE integration in mind, and as such, it assumes the full platform is available and thus the spec and the TCKs require JSF, EL, and EJB. This is not the best fit for MicroProfile, since it targets microservice usage patterns. Under MicroProfile not even Servlet is required, let alone EJB, EL, and JSF. Likewise, MicroProfile can’t be based on CDI SE, since SE does not include JAX-RS integration, which is essential for REST based microservices.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To solve this problem, the MicroProfile specifications effectively depend on a subset of the CDI spec, explicitly noting the above API elements are to be excluded. This is awkward and has led to confusion about how one achieves compliance.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Ultimately, the problem is that the CDI spec couples too many elements together. We need greater flexibility to allow for as many different platforms and environments to adopt and build off the standard.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;introducing-cdi-lite&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introducing-cdi-lite&quot; /&gt;Introducing CDI Lite&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you followed the CDI 2.0 expert group work a few years back, this title should ring a bell. CDI Lite was in the air back then, since we did expect some future need of added flexibility, but due to a lack of time and clear target we postponed its addition to the spec.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With the CDI programming model being core to MicroProfile, it seems obvious that its use cases should be considered as a first-class usage of CDI. Further, we should enable CDI composition into any other  platform, such as future Jakarta EE profiles, or combining it with other frameworks on top of plain old Java as a contribution to future innovations within the Java ecosystem.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So what should CDI Lite’s goal be? In my opinion we should define it as: “the core subset of CDI features that enables the greatest number of CDI implementations, CDI usage within the Java ecosystem, and opens the door to innovation, notably build-time injection approaches.”&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Not only would this improve the existing CDI ecosystem, it opens the door to many other interesting use cases such as:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Transcompilation.&lt;/strong&gt; It becomes possible to compile Java based injection into other language environments, such as Javascript. This is currently possible with Dagger and Kodein for Kotlin but not CDI&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Mobile platform support.&lt;/strong&gt; By enabling build time injection, it also becomes possible for an implementer to target mobile platforms such as Android.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Native Compilation.&lt;/strong&gt; By enabling build-time Java, the door is also opened to generating optimal native compiled images utilizing static compilers such as the GraalVM project.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;how-to-add-cdi-lite-to-the-spec&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-add-cdi-lite-to-the-spec&quot; /&gt;How to add CDI lite to the spec?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today, thanks to CDI 2.0 work, the spec is split into 3 parts: core, CDI for SE and CDI for EE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://www.cdi-spec.org/images/cdi2-layers.png&quot; alt=&quot;cdi2 layers&quot;&gt;
      &lt;/img&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 1. Current CDI spec layering&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Users and implementers are already familiar with the notion of different “flavors” for CDI.  Adding CDI Lite implies some work but the spec is already well organized to support such a change. Roughly, CDI lite should be defined as the core subset of which core, EE and SE extend. Further the EE spec integrations themselves can be defined in such a way so that each framework’s integration is optional, allowing any combination such as a standalone JAX-RS implementation with CDI support. Additionally this would enable future additional Jakarta EE profiles beyond just web and full.&lt;br&gt;
      This evolution would split Core CDI in CDI Lite and “Heavy CDI” as shown below. The CDI lite part could benefit CDI for Se as other platforms like MicroProfile.&lt;/br&gt;
      &lt;/p&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://www.cdi-spec.org/images/cdi3-layers.png&quot; alt=&quot;cdi3 layers&quot;&gt;
      &lt;/img&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 2. Spliting CDI Core in &lt;em&gt;lite&lt;/em&gt; and &lt;em&gt;full&lt;/em&gt;&lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;cdi-lite-scope&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdi-lite-scope&quot; /&gt;CDI Lite Scope&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The essential fundamental core of CDI is the programming model exposed to users which enables uniform annotation driven injection and further supports contextual state driven injection. Just the annotations defined in JSR-330 are not enough, there is also the need for a number of other common patterns and usages to make the framework complete.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Support popular CDI features like:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Beans (class, producers and synthetic beans)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;CDI DI (typesafe resolution, qualifiers, dynamic lookup)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Most built-in scopes (singleton, application, request, and dependent)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Contextual instances and their lifecycle&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Interceptors&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Events&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Other features may be added but may not have reached broad adoption like decorators, transactional events or specialization, so additional discussion would be needed.. Ideally we would utilize the opportunity to reduce technical debt, since each increases code complexity, and some of these underused capabilities are a major source of bug reports:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Decorators have 67 issues in the RI alone&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Specialization has 28 RI issues and 6 open spec issues&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;outside-cdi-lite-scope&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#outside-cdi-lite-scope&quot; /&gt;Outside CDI Lite Scope&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A number of features are only relevant to particular framework integrations. For example SessionScope is only relevant if the runtime environment implements Servlet (HttpSession), and ConversationScope is incomplete without EL and JSF. These technologies are not needed in a microservice scenario, as is the case in MicroProfile, and so should not be required.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Another capability that should be excluded from CDI Lite is portable extensions, but still part of CDI Full. Portable extensions run in opposition to the goals described above, since they are inherently a runtime-only contract which mandates a very specific container initialization lifecycle. As an example, portable extensions are often stateful, but they are not serializable, and any state they have can be passed into other beans or as part of lifecycle events that are required to occur. Further they are allowed to manipulate almost anything pertaining to a bean at just about every phase of the CDI lifecycle. These factors effectively preclude any implementation that aims to pregenerate wiring at build time. Yet extension implementations rarely need such an open-ended do-anything-you-want API.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Instead,  the CDI-Lite could address these concerns through purpose-built SPIs, such as  introducing a new explicit way to register annotated types and beans. It’s already partly done in CDI for SE in which users can programmatically add synthetic beans without portable extensions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All of the elements outside of the CDI-Lite scope would still be a part of the full specification, as the intention is not to affect existing implementations, only to open the door to new approaches and new implementations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the end, we would end up with a much more flexible standard that benefits everyone and carries over the same powerful programming model to new use-cases while bringing  improved efficiency to modern cloud deployment scenarios. &lt;br&gt;
      CDI Llite introduction wouldn’t be the pretext to deprecate existing features but to make the framework more modular and ready for all todays use cases and make it ready for future evolution.&lt;/br&gt;
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot; /&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As you may guess this spec evolution idea will require a lot of analysis and discussion. Should the Jakarta Contexts and Dependency Injection Project agree to go this way, we could imagine starting work on this new CDI version, but as usual, feedback from the community is very important to us. So feel free to share your thoughts in the comments of this post.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Thanks for helping us keep the CDI programming model around for the next 10 years!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2017/05/15/CDI_2_is_released.html</id>
    <title>CDI 2.0 is released</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2017-05-15T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2017/05/15/CDI_2_is_released.html" rel="alternate" type="text/html" />
    <category term="Release"></category>
    <summary>
      Our JCP Expert Group is pleased to announce the release of Contexts and Dependency Injection for Java 2.0.
      
      
      Specification, reference implementation (JBoss Weld 3.0.0.Final) and TCK can be downloaded here.
      
      
      What is CDI?
      
      
      CDI is one of the major Java EE specification.
      
      
      It was introduced with Java EE 6 in 2009, updated  for Java EE 7 and now with version 2.0 it is ready for Java EE 8 as well for Java SE or other platform like Micropofile.
      
      
      CDI defines a powerful set of complementary services that help improve the structure of application code.
      
      
      
      
      A well-defined lifecycle for stateful objects bound to lifecycle contexts, where the...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=365&quot; target=&quot;_blank&quot;&gt;JCP Expert Group&lt;/a&gt; is pleased to announce the release of Contexts and Dependency Injection for Java 2.0.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Specification, reference implementation (&lt;strong&gt;JBoss Weld 3.0.0.Final&lt;/strong&gt;) and TCK can be downloaded &lt;a href=&quot;http://www.cdi-spec.org/download/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-cdi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-cdi&quot; /&gt;What is CDI?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI is one of the major Java EE specification.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It was introduced with Java EE 6 in 2009, updated  for Java EE 7 and now with version 2.0 it is ready for Java EE 8 as well for Java SE or other platform like &lt;a href=&quot;http://microprofile.io&quot; target=&quot;_blank&quot;&gt;Micropofile&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI defines a powerful set of complementary services that help improve the structure of application code.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;A well-defined lifecycle for stateful objects bound to lifecycle contexts, where the set of contexts is extensible&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A sophisticated, typesafe dependency injection mechanism, including the ability to select dependencies at either development or deployment time, without verbose configuration&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Support for Java EE modularity and the Java EE component architecture?the modular structure of a Java EE application is taken into account when resolving dependencies between Java EE components&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Integration with the Unified Expression Language (EL), allowing any contextual object to be used directly within a JSF or JSP page&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The ability to decorate injected objects&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The ability to associate interceptors to objects via typesafe interceptor bindings&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;An event notification model&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A web conversation context in addition to the three standard web contexts defined by the Java Servlets specification&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;An SPI allowing portable extensions to integrate cleanly with the container&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;major-features-included-in-cdi-2-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#major-features-included-in-cdi-2-0&quot; /&gt;Major features included in CDI 2.0&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This CDI 2.0 includes important changes for the platform.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;The spec was split into &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#doc_organisation&quot;&gt;3 parts&lt;/a&gt; to add the support for Java SE.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;API to &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#se_bootstrap&quot;&gt;boot CDI in Java SE&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Observers (i.e. events) &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#observer_ordering&quot;&gt;ordering&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#firing_events_asynchronously&quot;&gt;Asynchronous event&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#configurators&quot;&gt;Configurators&lt;/a&gt; for major SPI elements&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Possibility to &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#process_observer_method&quot;&gt;configure or veto observer methods&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Add &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#built_in_annotation_literals&quot;&gt;built-in annotation literals&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Make possible to &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#interception_factory&quot;&gt;apply interceptor on producers&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Alignment on Java 8 features (streams, lambdas, repeating qualifiers)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A lot of other small feature will be delivered. Refer to the coming release notes to check them all.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;start-using-cdi-2-0-today-with-weld-3-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-using-cdi-2-0-today-with-weld-3-0&quot; /&gt;Start using CDI 2.0 today with Weld 3.0&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To develop your CDI 2.0 code just add cdi-api 2.0 your pom.xml.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;javax.enterprise&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;cdi-api&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;2.0&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can then run your code on Java SE or on WildFly &lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;running-on-java-se-with-weld-se&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-on-java-se-with-weld-se&quot; /&gt;Running on Java SE with Weld SE&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can then run your code on Java SE thanks to Weld SE, just add this dependency to your project:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.jboss.weld.se&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;weld-se-shaded&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.0.0.Final&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can then, bootstrap the CDI container in your code like this&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static void main(String... args) {
          try(SeContainer container = SeContainerInitializer.newInstance().initialize()) {
              // start the container, retrieve a bean and do work with it
              MyBean myBean = container.select(MyBean.class).get();
              myBean.doWork();
          }
          // shuts down automatically after the try with resources block.
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;running-on-java-ee-by-patching-wildfly&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-on-java-ee-by-patching-wildfly&quot; /&gt;Running on Java EE by patching WildFly&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We also provide a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Final/&quot;&gt;patch for WildFly 10.1.0&lt;/a&gt; to update Weld and thus CDI version on JBoss WildFly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To do so just download and unzip &lt;a href=&quot;http://wildfly.org/downloads/&quot;&gt;WildFly 10.1.0.Final&lt;/a&gt;, then download the patch (don’t unzip it), go to the &lt;code&gt;&amp;lt;WILDFLY_HOME&amp;gt;/bin&lt;/code&gt;  directory and patch the server with the following command:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;./jboss-cli.sh --command=&quot;patch apply &amp;lt;PATH_TO_PATCH&amp;gt;/wildfly-10.1.0.Final-weld-3.0.0.Final-patch.zip&quot;&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;you should obtain the following result in the console:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
          &quot;outcome&quot; : &quot;success&quot;,
          &quot;result&quot; : {}
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Your WildFly server is now patched to use CDI 2.0 and Weld 3.0.0.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;GlassFish 5.0 with CDI 2.0 support should be release in the coming weeks.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;stay-tuned&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stay-tuned&quot; /&gt;Stay tuned&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We’ll provide more article on CDI 2.0 new features so stay tuned by following &lt;a href=&quot;https://twitter.com/cdispec&quot;&gt;@cdispec&lt;/a&gt; twitter account.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2017/02/01/CDI_2_is_in_public_review.html</id>
    <title>CDI 2.0 is in public review</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2017-02-01T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2017/02/01/CDI_2_is_in_public_review.html" rel="alternate" type="text/html" />
    <category term="Release"></category>
    <summary>
      CDI 2.0 is now in public review status, you can now grab the PRD of the spec ot download the Javadoc.
      
      
      Major features included in CDI 2.0
      
      
      This CDI 2.0 includes important changes for the platform.
      
      
      
      
      The spec was split into 3 parts to add the support for Java SE.
      
      
      API to boot CDI in Java SE.
      
      
      Observers (i.e. events) ordering.
      
      
      Asynchronous event.
      
      
      Configurators for major SPI elements
      
      
      Possibility to configure or veto observer methods.
      
      
      Add built-in annotation literals
      
      
      Make possible to apply interceptor on producers.
      
      
      Alignment on Java 8 features (streams, lambdas, repeating qualifiers)
      
      
      
      
      A lot of other small feature will be delivered. Refer to the coming release notes to check...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI 2.0 is now in public review status, you can now grab the &lt;a href=&quot;https://jcp.org/aboutJava/communityprocess/pr/jsr365/index.html&quot; target=&quot;_blank&quot;&gt;PRD of the spec&lt;/a&gt; ot download the &lt;a href=&quot;https://jcp.org/aboutJava/communityprocess/pr/jsr365/index.html&quot; target=&quot;_blank&quot;&gt;Javadoc&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;major-features-included-in-cdi-2-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#major-features-included-in-cdi-2-0&quot; /&gt;Major features included in CDI 2.0&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This CDI 2.0 includes important changes for the platform.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;The spec was split into &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0-PRD/cdi-spec.html#doc_organisation&quot; target=&quot;_blank&quot;&gt;3 parts&lt;/a&gt; to add the support for Java SE.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;API to &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0-PRD/cdi-spec.html#se_bootstrap&quot; target=&quot;_blank&quot;&gt;boot CDI in Java SE&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Observers (i.e. events) &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0-PRD/cdi-spec.html#observer_ordering&quot; target=&quot;_blank&quot;&gt;ordering&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0-PRD/cdi-spec.html#firing_events_asynchronously&quot; target=&quot;_blank&quot;&gt;Asynchronous event&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0-PRD/cdi-spec.html#configurators&quot; target=&quot;_blank&quot;&gt;Configurators&lt;/a&gt; for major SPI elements&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Possibility to &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0-PRD/cdi-spec.html#process_observer_method&quot; target=&quot;_blank&quot;&gt;configure or veto observer methods&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Add &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0-PRD/cdi-spec.html#built_in_annotation_literals&quot; target=&quot;_blank&quot;&gt;built-in annotation literals&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Make possible to &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0-PRD/cdi-spec.html#interception_factory&quot; target=&quot;_blank&quot;&gt;apply interceptor on producers&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Alignment on Java 8 features (streams, lambdas, repeating qualifiers)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A lot of other small feature will be delivered. Refer to the coming release notes to check them all.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;ri-is-also-available&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ri-is-also-available&quot; /&gt;RI is also available&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We also provide a pre-release for the RI and API, thus You can start testing CDI 2.0 with Weld 3.0 CR1 that you can download &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.CR1/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To develop your CDI 2.0 code just switch cdi-api in your pom.xml to this version:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;nowrap&quot;&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;javax.enterprise&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;cdi-api&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;2.0-PFD&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We also provide a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.CR1/&quot; target=&quot;_blank&quot;&gt;patch for WildFly 10.1.0&lt;/a&gt; to help users evaluate CDI 2.0 under a Java EE application server.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To do so just download and unzip &lt;a href=&quot;http://wildfly.org/downloads/&quot; target=&quot;_blank&quot;&gt;WildFly 10.1.0.Final&lt;/a&gt;, then download the patch (no need to unzip it), go to the &lt;code&gt;&amp;lt;WILDFLY_HOME&amp;gt;/bin&lt;/code&gt; directory and patch the server with the following command:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;./jboss-cli.sh --command=&quot;patch apply &amp;lt;PATH_TO_PATCH&amp;gt;/wildfly-10.1.0.Final-weld-3.0.0.CR1-patch.zip&quot;&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;you should obtain the following result in the console:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;nowrap&quot;&gt;{
          &quot;outcome&quot; : &quot;success&quot;,
          &quot;result&quot; : {}
      }&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Your WildFly server is now patched to use CDI 2.0 and Weld 3.0 CR1.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy testing!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2017/01/05/CDI_2_Beta_1_is_available.html</id>
    <title>CDI 2.0 Beta 1 is available</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2017-01-05T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2017/01/05/CDI_2_Beta_1_is_available.html" rel="alternate" type="text/html" />
    <category term="Release"></category>
    <summary>
      After more than 2 years of work CDI 2.0 is around the corner. Its feature list is now complete and Beta for RI (Weld 3.0 Beta1) is available for download.
      This post lists what&#8217;s included and give you some insight on the final release and what comes next
      
      
      Give it a try
      
      
      First, you may want to start testing the RI and discover the new API, all the resources are listed below:
      
      
      
      
      You can browse the spec document in html or pdf
      
      
      If you prefer Javadoc you can read it here
      
      
      CDI 2.0 Beta API is available on Maven Central. You can also download the jar...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After more than 2 years of work CDI 2.0 is around the corner. Its feature list is now complete and Beta for RI (Weld 3.0 Beta1) is available for download.
      This post lists what’s included and give you some insight on the final release and what comes next&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;give-it-a-try&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#give-it-a-try&quot; /&gt;Give it a try&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;First, you may want to start testing the RI and discover the new API, all the resources are listed below:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;You can browse the spec document in &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.html&quot; target=&quot;_blank&quot;&gt;html&lt;/a&gt; or &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.pdf&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;If you prefer Javadoc you can read it &lt;a href=&quot;http://docs.jboss.org/cdi/api/2.0.Beta1&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;CDI 2.0 Beta API is available on &lt;a href=&quot;http://search.maven.org/#artifactdetails|javax.enterprise|cdi-api|2.0.Beta1|jar&quot; target=&quot;_blank&quot;&gt;Maven Central&lt;/a&gt;. You can also download the jar &lt;a href=&quot;http://search.maven.org/remotecontent?filepath=javax/enterprise/cdi-api/2.0.Beta1/cdi-api-2.0.Beta1.jar&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Last but not least, the reference implementation (Weld 3.0 Beta 1) is downloadable &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Beta1/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and can be also be used from &lt;a href=&quot;http://search.maven.org/#artifactdetails|org.jboss.weld|weld-core-impl|3.0.0.Beta1|jar&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;major-features-included-in-cdi-2-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#major-features-included-in-cdi-2-0&quot; /&gt;Major features included in CDI 2.0&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This CDI 2.0 includes important changes for the platform.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;The spec was split into &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.html#doc_organisation&quot; target=&quot;_blank&quot;&gt;3 parts&lt;/a&gt; to add the support for Java SE.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;API to &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.html#se_bootstrap&quot; target=&quot;_blank&quot;&gt;boot CDI in Java SE&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Observers (i.e. events) &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.html#observer_ordering&quot; target=&quot;_blank&quot;&gt;ordering&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.html#firing_events_asynchronously&quot; target=&quot;_blank&quot;&gt;Asynchronous event&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.html#configurators&quot; target=&quot;_blank&quot;&gt;Configurators&lt;/a&gt; for major SPI elements&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Possibility to &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.html#process_observer_method&quot; target=&quot;_blank&quot;&gt;configure or veto observer methods&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Add &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.html#built_in_annotation_literals&quot; target=&quot;_blank&quot;&gt;built-in annotation literals&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Make possible to &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.Beta1/cdi-spec.html#interception_factory&quot; target=&quot;_blank&quot;&gt;apply interceptor on producers&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Alignment on Java 8 features (streams, lambdas, repeating qualifiers)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A lot of other small feature will be delivered. Refer to the coming release notes to check them all.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;release-agenda&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#release-agenda&quot; /&gt;Release agenda&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If everything stays on track we should send the PFD (proposed final draft) with TCK and RI to the JCP soon.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If the JCP ballot is green, CDI 2.0 final could be released before end of February.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-next&quot; /&gt;What’s next&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our release plan for CDI 2.0 has always been to deliver it before Java EE 8 to let other spec grab our new features and make the best out of them.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are still considering to start working on CDI 2.1 to clarify or add the few features needed for Java EE 8 and beyond.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Stay tuned.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2015/10/23/Meet-CDI-at-java-one-2015.html</id>
    <title>Meet CDI at Java One 2015</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2015-10-23T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2015/10/23/Meet-CDI-at-java-one-2015.html" rel="alternate" type="text/html" />
    <category term="Java One"></category>
    <category term="Talks"></category>
    <summary>
      During Java One 2015, a lot of CDI related talks and event will happen. find most of them in this post
      
      
      CDI related talks
      
      
      In this agenda you&#8217;ll find most of CDI related talk to help you prepare your schedule
      
      
      
      
      
      Focus on EG talks
      
      
      If you want to have the best of CDI overview in Java One, don&#8217;t miss these talks:
      
      
      
      
      CDI 2.0: Whats in the Works? (monday 12:30, Cyril Magnin I): to learn about coming features in CDI 2.0
      
      
      Apache DeltaSpike, the CDI Toolbox (monday 2:30, Cyril Magnin I): Discover Apache DeltaSpike, the heart of CDI Ecosystem
      
      
      Advanced CDI in live coding (tuesday 8:30, Cyril Magnin...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;During Java One 2015, a lot of CDI related talks and event will happen. find most of them in this post&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;cdi-related-talks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdi-related-talks&quot; /&gt;CDI related talks&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this agenda you’ll find most of CDI related talk to help you prepare your schedule&lt;/p&gt;
      &lt;/div&gt;
      &lt;iframe src=&quot;https://calendar.google.com/calendar/embed?title=CDI%20Talks%20in%20Java%20One%202015&amp;amp;showNav=0&amp;amp;showDate=0&amp;amp;showPrint=0&amp;amp;showCalendars=0&amp;amp;mode=AGENDA&amp;amp;height=600&amp;amp;wkst=1&amp;amp;hl=en&amp;amp;bgcolor=%23FFFFFF&amp;amp;src=sabot-durand.net_uq9ukhrb7o6mi5g6t3dlbbd8sc%40group.calendar.google.com&amp;amp;color=%231B887A&amp;amp;ctz=America%2FLos_Angeles&amp;amp;dates=20151025%2F20151030&quot; style=&quot;border-width:0&quot; width=&quot;800&quot; height=&quot;700&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;focus-on-eg-talks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#focus-on-eg-talks&quot; /&gt;Focus on EG talks&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you want to have the best of CDI overview in Java One, don’t miss these talks:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;CDI 2.0: Whats in the Works?&lt;/strong&gt; (monday 12:30, Cyril Magnin I): to learn about coming features in CDI 2.0&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Apache DeltaSpike, the CDI Toolbox&lt;/strong&gt; (monday 2:30, Cyril Magnin I): Discover Apache DeltaSpike, the heart of CDI Ecosystem&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Advanced CDI in live coding&lt;/strong&gt; (tuesday 8:30, Cyril Magnin II/II): learn the power of CDI portable extension to integrate your framework in CDI programming model&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;i-ll-be-available-for-you-questions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-ll-be-available-for-you-questions&quot; /&gt;I’ll be available for you questions&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You’ll find me at the Hackergarten Tuesday afternoon and wednesday morning to help you on CDI, answer your question or discuss the spec.
      You can even pass by just to say Hello aor bring me a &lt;span class=&quot;line-through&quot;&gt;beer&lt;/span&gt;, coffee ;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Have a nice Java One Week.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2015/10/15/Learn-CDI-with-TCK.html</id>
    <title>Learn CDI spec with our TCK</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2015-10-15T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2015/10/15/Learn-CDI-with-TCK.html" rel="alternate" type="text/html" />
    <category term="TCK"></category>
    <summary>
      Beyond being one of the few open source TCK around, CDI TCK is one of the easiest to get started with.
      
      
      Now that we have released a new version of spec doc embedding TCK test, it&#8217;s easier than ever.
      
      
      Learn what we did and how to use it.
      
      
      CDI TCK for the dummies
      
      
      TCK stands for Technology Compatibility Kit.
      It&#8217;s one of the 3 part a JSR expert group has to release (2 others being the spec and the Reference Implementation).
      
      
      A TCK is a collection of tests that actively define the spec.
      It&#8217;s the tool that is used to determine if an implementation is a CDI...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Beyond being one of the few open source TCK around, CDI TCK is one of the easiest to get started with.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now that we have released a new version of spec doc embedding TCK test, it’s easier than ever.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Learn what we did and how to use it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;cdi-tck-for-the-dummies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdi-tck-for-the-dummies&quot; /&gt;CDI TCK for the dummies&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;TCK stands for Technology Compatibility Kit.
      It’s one of the 3 part a JSR expert group has to release (2 others being the spec and the Reference Implementation).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A TCK is a collection of tests that actively define the spec.
      It’s the tool that is used to determine if an implementation is a CDI implementation or not.
      So this piece of code is the most important and the hardest to develop and maintain.
      Ok, RI could seem more important, but it’s under the spotlight and is nothing without the TCK.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To make short, TCK is the code that makes CDI a specification and thus a standard.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The great guy behind our TCK is &lt;a href=&quot;https://github.com/tremes&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Tomas Remes&lt;/strong&gt;&lt;/a&gt; and he doing an awesome job pointing holes or unclear statements in spec text or refactoring all the TCK after CDI split in 2.0-EDR1.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you want to learn more about the TCK I suggest that you check &lt;a href=&quot;http://www.cdi-spec.org/cditck&quot; target=&quot;_blank&quot;&gt;our dedicated page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;tck-is-more-than-what-it-seems&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tck-is-more-than-what-it-seems&quot; /&gt;TCK is more than what it seems&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The TCK role is not restricted to the specification mold, it can also be a great way to learn the spec by code.
      To crown that, thanks to &lt;a href=&quot;http://arquillian.org&quot; target=&quot;_blank&quot;&gt;Arquillian&lt;/a&gt;, CDI TCK is very easy to understand and very expressive.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But jumping from specification to test can be a bit complicated and this exercise can discourage many of our user.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That’s why, a few months ago, we started to think about a solution to create links from the spec text to the TCK.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It seemed quite doable since the reverse link has always existed: each since TCK tests have meta data about the spec section it refers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, Tomas made the required upgrade to the TCK and developed a script to add tests to the spec.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;meet-spec-doc-with-tck-assertion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#meet-spec-doc-with-tck-assertion&quot; /&gt;Meet Spec doc with TCK assertion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Thanks to this work we are able to release a &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec-with-assertions.html&quot; target=&quot;_blank&quot;&gt;special edition of CDI 1.2 specification document including TCK assertion and link to their matching test class on Github&lt;/a&gt;.
      The same is done for the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.EDR1/cdi-spec-with-assertions.html&quot;&gt;CDI 2.0 work in progress specification&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Don’t worry the original specifications docs stay unchanged, we only released a new flavor for them on our &lt;a href=&quot;http://www.cdi-spec.org/download&quot;&gt;download page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;assertion-link-by-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#assertion-link-by-example&quot; /&gt;Assertion link by example&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Due to normalization constraint (rules duplication avoidance) we have on the spec, some statement could seem confusing when reading them.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s take, for instance, the first statement of section &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec-with-assertions.html#unproxyable&quot; target=&quot;_blank&quot;&gt;3.15 Unproxyable bean types&lt;/a&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;quoteblock&quot;&gt;
      &lt;blockquote&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The container uses proxies to provide certain functionality. Certain legal bean types cannot be proxied by the container:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;classes which don’t have a non-private constructor with no parameters,&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Yeah a triple negation…​&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You could take the next minute to figure out the exact meaning of the sentence or you could click on the &quot;Show TCK assertions&quot; link and check the two tests related to this section to see the cases where this rules make the deployment fails.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;learn-test-and-challenge&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#learn-test-and-challenge&quot; /&gt;Learn, test and challenge&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now that you have this nice tool in your hand, TCK will be your CDI Lab, and perhaps, you’ll come back with corner use cases not covered or new challenges for the TCK.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Go and learn!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2015/09/29/Second-F2F-meeting.html</id>
    <title>CDI 2.0 Second Face to face meeting feedback</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2015-09-29T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2015/09/29/Second-F2F-meeting.html" rel="alternate" type="text/html" />
    <category term="meeting"></category>
    <summary>
      Last week we had our second CDI 2.0 Face to Face meeting in Paris (France).
      This is a summary of the point discussed and leads we&#8217;d like to follow.
      Of course each point we&#8217;ll lead to a proposal later and discussed on the mailing list.
      
      
      Roadmap
      
      
      CDI 2.0 is still planned for 1st half 2016.
      We&#8217;ll focus on new feature and SE support for this release.
      
      
      CDI 2.1 should start after 2.0 release and focus Java EE 8 specific enhancement.
      We&#8217;ll probably focus a bit more on modularity since Java 9 will be around the corner giving us a better visibility of how anticipate its new module...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last week we had our second CDI 2.0 Face to Face meeting in Paris (France).
      This is a summary of the point discussed and leads we’d like to follow.
      Of course each point we’ll lead to a proposal later and discussed on the mailing list.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;roadmap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#roadmap&quot; /&gt;Roadmap&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI 2.0 is still planned for 1st half 2016.
      We’ll focus on new feature and SE support for this release.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI 2.1 should start after 2.0 release and focus Java EE 8 specific enhancement.
      We’ll probably focus a bit more on modularity since Java 9 will be around the corner giving us a better visibility of how anticipate its new module approach.
      Content of 2.1 will be defined in the coming weeks&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;cdi-se-review&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdi-se-review&quot; /&gt;CDI SE review&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI bootstrap on Java SE is one of the feature released in our first early draft.
      The Java SE support needed extra work to be complete and we wanted to review the boot api included to see how it could be enhanced.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;bootstrap-api&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bootstrap-api&quot; /&gt;bootstrap API&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We’d like to review the proposed bootstrap API to make it a bit richer and have the boot process in a specific class.
      The idea is to get inspiration from the new Weld Se bootstrap with a builder pattern (see &lt;a href=&quot;https://github.com/weld/core/blob/master/environments/se/core/src/main/java/org/jboss/weld/environment/se/Weld.java&quot;&gt;&lt;code&gt;Weld&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/weld/core/blob/master/environments/se/core/src/main/java/org/jboss/weld/environment/se/WeldContainer.java&quot;&gt;&lt;code&gt;WeldContainer&lt;/code&gt;&lt;/a&gt; classes) and the possibility to explicitly choose the implementation if multiple impl should be in classpath.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;context-control&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#context-control&quot; /&gt;Context control&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This feature seemed a bit risky to specify. We’d preferred an approach based on existing built-in scope: RequestScoped and an interceptor activating it for a given invocation and unactivating it just after . something like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@WithinRequest
      public void doSomethigWithRequestScopedBeans() {
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This could give users the possibility to start and stop a context without explicitly adding these methods in the SPI
      We also discussed the possibility to have a Conversation-like context activated thru a built-in scope.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;bean-discovery-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bean-discovery-mode&quot; /&gt;Bean discovery mode&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The new bootstrap api should prevent us to specify a new bean discovery mode since the builder api will contains a mean to deactivate bean discovery and create a synthetic bean archive by adding class and packages of beans.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;async-event-review&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#async-event-review&quot; /&gt;Async event review&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There was discussion about exceptions handling and the issues raised from mixing sync and async observers. So the leads we’d like to follow are the following&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;stop calling sync observer from fireAsync() (fire() is for @Observes and fireAsync() is for @ObservesAsync)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Remove &lt;code&gt;FireAsyncException&lt;/code&gt; in favor of &lt;code&gt;CompletionException&lt;/code&gt; since an exception during async events pipeline execution is noting more than that.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To sum it up:&lt;/p&gt;
      &lt;/div&gt;
      &lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width: 70%;&quot;&gt;
      &lt;caption class=&quot;title&quot;&gt;Table 1. async and sync events rules&lt;/caption&gt;
      &lt;colgroup&gt;
      &lt;col style=&quot;width: 20%;&quot;&gt;
      &lt;col style=&quot;width: 40%;&quot;&gt;
      &lt;col style=&quot;width: 40%;&quot;&gt;
      &lt;/col&gt;
      &lt;thead&gt;
      &lt;tr&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Event method&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;@Observes&lt;/code&gt; notified&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;@ObservesAsync&lt;/code&gt; notified&lt;/th&gt;
      &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;fire()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;yes, in the same thread&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;no&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;fireAsync()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;no&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;yes, in a different thread&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
      &lt;/col&gt;
      &lt;/col&gt;
      &lt;/colgroup&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;cdi-lite&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdi-lite&quot; /&gt;CDI Lite&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As you know, CDI lite is one of the expected features for CDI 2.0.
      Yet, adding it with the SE / EE split for 2.0 could bring a lot of glitches and could reveal itself a catastrophe without speaking of specific impl and TCK for it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That’s why we choose to add it in the annexe of the spec as a proposal for a next CDI version.
      Implementation will be allowed to create their CDI lite version based on this subset of CDI features:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;JSR 330 with CDI type resolution rules&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;CDI qualifiers usage&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Producers and disposers&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Programmatic lookup&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;@Singleton&lt;/code&gt; and &lt;code&gt;@Dependent&lt;/code&gt; pseudo-scopes support&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;SE bootstrap&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We choose not to include events and spi to keep the impl lite.
      Of course this could be change during our discussion.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;aop-on-producer-and-custom-beans&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#aop-on-producer-and-custom-beans&quot; /&gt;AOP on producer and custom beans&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The goal was to propose a solution to apply Interceptors and Decorators on produced beans or custom beans.
      For producers we also have the problem of applying interceptor binding only on some method and not on the whole class.
      We looked for a solution that could be used in both case and that was more an &quot;advanced users&quot; approach than an out of box one.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The idea is to provide a class or a built-in bean to help produced bean instances using AnnotatedType to allow override of annotation on instance class.
      This suppose the addition of &lt;code&gt;AnnotatedTypeBuilder&lt;/code&gt; to the SPI to ease the use of building a synthetic &lt;code&gt;AnnotatedType&lt;/code&gt;.
      This would follow the same idea than the &lt;code&gt;Unmanaged&lt;/code&gt; class which provide a way to inject bean in a non bean (non managed) class.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That would give something like:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MyAdvancedProducerBean {
      
          public BeanInstanceBuilder&amp;lt;MyClass&amp;gt; bib = new BeanInstanceBuilder&amp;lt;&amp;gt;();
      
          @Produces
          @RequestScoped
          public MyClass produceTransactionalMyClass() {
      
              AnnotatedTypeBuilder&amp;lt;MyClass&amp;gt; atb = new AnnotatedTypeBuilder&amp;lt;&amp;gt;()
                 .readFrom(MyClass.class)
                 .addToMethod(MyClass.class.getMethod(&quot;performInTransaction&quot;)
                  , new TransactionalLiteral());
      
              return bib.readFromType(atb.build())
                  .build(); //instance of the bean with requested interceptors / decorators
          }
      
          public void disposeMyClass (@Disposes Myclass td) {
      
              bib.dispose(td);
          }
      
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A similar mechanism could be used in the &lt;code&gt;create()&lt;/code&gt; method of custom beans.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot; /&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Of course, all these points will be described in more detail in coming proposal documents.
      You’ll only find here general ideas of what we like to propose.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We also worked on other points in Jira for clarification or fix.
      This will go to the mailing list.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This post will be updated with new information or clarification if needed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2015/07/03/CDI-2_0-EDR1-released.html</id>
    <title>CDI 2.0 Early Draft Review 1 released</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2015-07-03T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2015/07/03/CDI-2_0-EDR1-released.html" rel="alternate" type="text/html" />
    <category term="release"></category>
    <summary>
      After eight months of work, the CDI 2.0 expert group is pleased to release this first draft of CDI 2.0 specification for community review. This draft contains important and long awaited features that will change CDI as we know it.
      
      
      But these features are still proposals and we really need your feedback to know if the way we specified them fits your needs.
        Let&#8217;s check what&#8217;s on the menu.
      
      
      CDI runs now in Java SE
      
      
      One of the oldest request was the support of Java SE in CDI. Since the beginning the two main implementations (JBoss Weld and Apache OpenWebBeans) proposed proprietary...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After eight months of work, the CDI 2.0 expert group is pleased to release this first draft of &lt;a href=&quot;https://docs.jboss.org/cdi/spec/2.0.EDR1/cdi-spec.html&quot; target=&quot;_blank&quot;&gt;CDI 2.0 specification&lt;/a&gt; for community review. This draft contains important and long awaited features that will change CDI as we know it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But these features are still proposals and we really need your feedback to know if the way we specified them fits your needs.
        Let’s check what’s on the menu.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;cdi-runs-now-in-java-se&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdi-runs-now-in-java-se&quot; /&gt;CDI runs now in Java SE&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;One of the oldest request was the support of Java SE in CDI. Since the beginning the two main implementations (JBoss Weld and Apache OpenWebBeans) proposed proprietary solutions to use CDI in Java SE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Then, Apache DeltaSpike came in and provided an absract solution to boot either implementations, but this wasn’t never standardized at spec level, until now…​&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;why-this-important&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-this-important&quot; /&gt;Why this important?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, if implementation and a third party project already provide this Java SE support, what’s the big deal to have it at spec level? The answer is &quot;increase adoption by other specifications&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A lot of Java EE specification provide a Java SE support (like JPA or JAX-RS). Since CDI doesn’t provide this support as well, they can’t rely totally on it since it is not available in  Java SE.
      So, the side effect of this new Java SE support will be a better CDI integration in Java EE. If we add to this a broader adoption by third parties framework, we see that the benefits for CDI and its users goes far beyond the simple feature.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;preparing-java-se-support-api-split&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#preparing-java-se-support-api-split&quot; /&gt;Preparing Java SE support (API split)&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Adding such a straight forward feature to CDI seems quite easy on paper but, trust me, it wasn’t.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you check the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html&quot; target=&quot;_blank&quot;&gt;current 1.2 specification&lt;/a&gt;, you’ll see that EJB is everywhere in the spec. You also have reference to JSF, servlet or Expression Language all accross the document.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So the first work was to split the spec to put he Java EE specific feature in a dedicated part to have all CDI core feature (no tie to other spec) in its own part. This specification has now 3 parts plus an introduction as explain in the &lt;a href=&quot;https://docs.jboss.org/cdi/spec/2.0.EDR1/cdi-spec.html#_foreword&quot; target=&quot;_blank&quot;&gt;foreword section&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This work was done as carefully as possible to avoid destroying, duplicating or modifying rules, yet, your double check here is most welcome to be sure that we didn’t forget something in the rewriting.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Yes it’s rather long work to read (or re-read) the whole specification but it’s also the ocasion to see it with a fresh eye with this new organisation. You migh want grab the &lt;a href=&quot;https://docs.jboss.org/cdi/spec/2.0.EDR1/cdi-spec-2.0.pdf&quot; target=&quot;_blank&quot;&gt;pdf version&lt;/a&gt; (whose look has been updated) of the spec to go through it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;booting-cdi-in-java-se&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#booting-cdi-in-java-se&quot; /&gt;Booting CDI in Java SE&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After all this work (invisible for end users), we introduced the Java SE support by adding a bootstrap API for Java SE. The solution make use of already existing &lt;a href=&quot;http://docs.jboss.org/cdi/api/2.0.EDR1/javax/enterprise/inject/spi/CDIProvider.html&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;CDIProvider&lt;/code&gt;&lt;/a&gt; interface and &lt;a href=&quot;http://docs.jboss.org/cdi/api/2.0.EDR1/javax/enterprise/inject/spi/CDI.html&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;CDI&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Code for booting CDI in Java SE looks like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static void main(String... args) {
          try(CDI&amp;lt;Object&amp;gt; cdi = CDI.getCDIProvider().initialize()) {
              // start the container, retrieve a bean and do work with it
              MyBean myBean = cdi.select(MyBean.class).get();
              myBean.doWork();
          }
          // shuts down automatically after the try with resources block.
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Go check the &lt;a href=&quot;https://docs.jboss.org/cdi/spec/2.0.EDR1/cdi-spec.html#bootstrap-se&quot; target=&quot;_blank&quot;&gt;Bootstrapping a CDI container in Java SE&lt;/a&gt; chapter in the specification and tell us what do you think.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;still-work-to-do&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#still-work-to-do&quot; /&gt;Still work to do&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Java SE support needs more work and we are still working on the feature. The two main aspect are:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-529&quot; target=&quot;_blank&quot;&gt;work on bean discovery mode in SE&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-530&quot; target=&quot;_blank&quot;&gt;work on context control in SE&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Again, your feedback and ideas are most welcome to help us for these part specification.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;ordering-event-observers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ordering-event-observers&quot; /&gt;Ordering event observers&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;One of the &lt;a href=&quot;https://issues.jboss.org/browse/CDI-4&quot; target=&quot;_blank&quot;&gt;oldest requested feature&lt;/a&gt; for CDI was resolved in this EDR : observer ordering.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The feature was simply design by using &lt;code&gt;@Priority&lt;/code&gt; annotation (from commons annotation) and will be used like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;void afterLogin(@Observes @Priority(APPLICATION) LoggedInEvent event) { ... }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The use of &lt;code&gt;@Priority&lt;/code&gt; was rather obvious since we already use this annotaion for interceptor, decorator or alternatives activation and ordering. The only issue here is that the annotation only targets types right now. We asked for a review of JSR-250 to add parameter as accepted target for &lt;code&gt;@Priority&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Check the &lt;a href=&quot;https://docs.jboss.org/cdi/spec/2.0.EDR1/cdi-spec.html#observer_ordering&quot; target=&quot;_blank&quot;&gt;section dealing with observer ordering&lt;/a&gt; to have all the details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;asynchronous-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#asynchronous-events&quot; /&gt;Asynchronous events&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Another important feature requested by many of you. Introducing Asynchronous event wasn’t an easy thing, because we needed to keep backward compatibilty with existing events. We also wanted to leverage new asynchronous API in Java 8 to provide the most up to date approach in the spec.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The solution we choose was to introduce &lt;code&gt;@ObservesAsync&lt;/code&gt; and add methods &lt;code&gt;fireAsync()&lt;/code&gt; in the &lt;code&gt;Event&lt;/code&gt; interface. So the exisitng observer (defined with &lt;code&gt;@Observes&lt;/code&gt;) will stay synhcronous and new observer defined by &lt;code&gt;@ObservesAsync&lt;/code&gt; will be called asynchronously if the event was triggered with &lt;code&gt;fireAsync()&lt;/code&gt; (and won’t be called from a classical &lt;code&gt;fire()&lt;/code&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So asynchronous event usage will look like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Inject Event&amp;lt;LoggedInEvent&amp;gt; loggedInEvent;
      
      public void login() {
          ...
          loggedInEvent.fireAsync( new LoggedInEvent(user) );
      }
      
      ...
      
      public void asyncAfterLogin(@ObservesAsync LoggedInEvent event) { ... }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The best is to re-read &lt;a href=&quot;https://docs.jboss.org/cdi/spec/2.0.EDR1/cdi-spec.html#events&quot; target=&quot;_blank&quot;&gt;all the event chapter&lt;/a&gt; in the spec to get the details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;why-this-double-activation-is-needed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-this-double-activation-is-needed&quot; /&gt;Why this double activation is needed?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For the producer (&lt;code&gt;fire()&lt;/code&gt;) side it’s rather obvious : we cannot magically change all synchronous event call to async. We need an handle on the work in progress (so a new method signature with &lt;code&gt;CompletionStage&lt;/code&gt;), the payload mutation mechanism would break as all transactional events. So there’s no debate on &lt;code&gt;fireAsync()&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On the observer side, the reason is for backward compatibility. CDI events are a great way to cross boundaries of our own code and activate unknown code at runtime in another module of the app (i.e. another jar) that we don’t own. This other code can be a framework, a code developed by an other team in a big project or a legacy jar that we don’t want to touch.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Imagine the following use cases (all code running on CDI 2)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;I’m compiling in CDI 1.x and one of the Jar (framework for instance) already migrated to CDI 2.0 firing async event where it use to fire sync events. Without activation on the observer side, I have all the chance to see my observer break. And if I decide to upgrade to CDI 2.0 I must have a way to activate / deactivate async call on given observers&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;I’m compiling in CDI 2.0 but use &lt;code&gt;jar1&lt;/code&gt; in CDI 1.0 and &lt;code&gt;jar2&lt;/code&gt; in CDI 2.0 coming from other teams. &lt;code&gt;jar2&lt;/code&gt; and &lt;code&gt;jar1&lt;/code&gt; are old related pieces of code communicating the event. The guys in &lt;code&gt;jar2&lt;/code&gt; had time to migrate to CDI 2.0 and switch most fire() to fireAsync(). Observer in jar1 will be called asynchronously if the default is to have async activated for all observers.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;These example looks like corner cases but the side effect will be that no framework developers will switch to fireAsync() for the sake of defensive programming. So async event would have a serious adoption problem withotu this double activation.
      More than that, as we are designing a Java EE specification we must be committed to backward compatibility and cannot change behavior of old code, like it would do if we chose to not have activation on observer side.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;other-change-corrections-and-clarifications&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#other-change-corrections-and-clarifications&quot; /&gt;Other change, corrections and clarifications&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can check the &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12311062&amp;amp;version=12327364&quot; target=&quot;_blank&quot;&gt;release notes&lt;/a&gt; of this early draft to discover the more minor changes we also introduced in the spec.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;implementation-and-tck&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implementation-and-tck&quot; /&gt;Implementation and TCK&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;TCK team and JBoss Weld team are currently working hard to provide a Reference Implementation for this draft. You’ll be notified as soon as there’ll be released.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;we-need-you&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#we-need-you&quot; /&gt;We need you&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To go on on this Early draft, we really need your feedback. The review period will be launch in the coming days by the JCP and will run for 90 days. You can give your feedback in many way:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;By commenting this post&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;On the &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/cdi-dev&quot; target=&quot;_blank&quot;&gt;mailing list&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;On our &lt;a href=&quot;https://issues.jboss.org&quot; target=&quot;_blank&quot;&gt;Jira platform&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;or, if it’s rather short on &lt;a href=&quot;https://twitter.com/cdispec&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Thank you for helping us making CDI one of the best programming model for Java and Java EE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2015/02/23/CDI-2_0_-_A_glimpse_at_the_future.html</id>
    <title>CDI 2.0 - A glimpse at the future</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2015-02-23T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2015/02/23/CDI-2_0_-_A_glimpse_at_the_future.html" rel="alternate" type="text/html" />
    <category term="cdi2"></category>
    <summary>
      Introduction
      
      
      Before we have a look at the changes in the upcoming CDI 2.0 specification, lets talk about where they come from. Did you know that they were provided by the community, so maybe by you?
      
      
      Before the work on JSR 365 started, former expert group members, the expert group members of other specifications and the community were asked which changes they would like to see in CDI 2.0. 260 developers provided their feedback in the community survey. Based on these information, the 6 main topics were defined:
      
      
      
      
      modularity,
      
      
      enhancements of the event system,
      
      
      improvements for interceptors and decorators,
      
      
      CDI for Java SE,
      
      
      usage of Java 8...
    </summary>
    <content type="html">
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot; /&gt;Introduction&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before we have a look at the changes in the upcoming CDI 2.0 specification, lets talk about where they come from. Did you know that they were provided by the community, so maybe by you?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before the work on &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=365&quot; target=&quot;_blank&quot;&gt;JSR 365&lt;/a&gt; started, former expert group members, the expert group members of other specifications and the community were asked which changes they would like to see in CDI 2.0. 260 developers provided their feedback in the community survey. Based on these information, the 6 main topics were defined:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;modularity,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;enhancements of the event system,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;improvements for interceptors and decorators,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;CDI for Java SE,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;usage of Java 8 features and&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;SPI and context enhancements.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The work on these topic is organized in 6 workshops, one for each main topic. This allows the members to focus their efforts and the group to work on several topics in parallel. The work of each workshop is tracked in a publicly available workshop document. You can find a reference to each document in the following paragraphs.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The 3.0.0.Alpha releases of Weld, the CDI reference implementation, provide prototype implementations for the discussed features. The goal is to create an early proof of concept and to give the community a chance to try the new features and to provide feedback.&lt;br&gt;
      But please be aware, that these releases should not be used for production. They are only prototypes and the following releases are likely to contain incompatible changes.&lt;/br&gt;
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;main-topics-for-cdi-2-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#main-topics-for-cdi-2-0&quot; /&gt;Main Topics for CDI 2.0&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OK, enough banter for now. Lets have a more detailed look at the current status of work and some new features in the following subsection.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;modularity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#modularity&quot; /&gt;Modularity&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;One of the main topics for CDI 2.0 is modularization. In general, no one likes to consume a huge and heavy spec, if only a small part of it is required for the job. To make CDI easier to consume, the plan is to split the specification into different parts that provide different subsets of it. A project or JSR could then decide which parts it likes to use and define its dependencies accordingly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The work on this topic is still in a very early state and so far, there are just some ideas on how the specification shall be modularized. The documented suggestion of 5 different parts that depend on each other will most likely not be the final version.  &lt;br&gt;
      The new idea is to split the specification into 3 parts: CDI full with Java EE support, CDI full and CDI light. CDI full with Java EE support will provide the full feature set of the specification. CDI full and CDI light will only provide a subset of it. The Java EE support will be missing in both of them. Additionally, the support for Contexts and AOP will be missing in CDI light. We will have to see, if this will be the final version.&lt;/br&gt;
      &lt;/p&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;These are the current ideas on how to create a modular CDI specification. If you like to get more details or follow future discussions on this topic, you can find the workshop document &lt;a href=&quot;https://docs.google.com/document/d/1jzCuFQjtCSrnZGRAHjn0oknWvEaP3h0KizW1mHB4AZU/edit?usp=sharing&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;enhancements-of-the-events-system&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#enhancements-of-the-events-system&quot; /&gt;Enhancements of the events system&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The enhancement of the existing event mechanics seems to be in heavy demand of the community and is one of the bigger topics for CDI 2.0. The main features requested by the community were to support asynchronous events and to get a better control about events and event observers. There are several ideas that are discussed at the moment and the latest Weld 3.0.0 Alpha releases provided prototype implementations for some of them.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Lets have a look at two of the momentarily discussed features. And again, the work is still ongoing and everything can still change.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;ordering-of-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ordering-of-events&quot; /&gt;Ordering of events&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;One of the requested enhancements is an option to order the event observers. The currently agreed solution is to use an approach similar to the priority definition for interceptors. The @Priority annotation can be used to define the priority of an event observer. The observers will process the event in ascending order of their priority. A working prototype for this feature was released with Weld 3.0.0.Alpha1. You can find more information about it in the &lt;a href=&quot;http://weld.cdi-spec.org/news/2014/10/02/weld-300Alpha1/&quot; target=&quot;_blank&quot;&gt;release announcement&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;asynchronous-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#asynchronous-events&quot; /&gt;Asynchronous events:&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Up to now, events in CDI were processed synchronously. There are some workarounds to trigger asynchronous processing, e.g. using asynchronous EJBs, but this was outside the CDI specification and shall be changed with CDI 2.0. &lt;br&gt;
      The Weld 3.0.0.Alpha3 release provides a working prototype, which adds the method fireAsync to the Event interface. The processing of an asynchronous event is similar to the processing of a synchronous one. The event object is mutable and thread-safe and the event observers will process the event in the defined order. You can read more about it in the &lt;a href=&quot;http://weld.cdi-spec.org/news/2014/12/10/an-update-on-weld-3/&quot;&gt;release announcement of Weld 3.0.0.Alpha3&lt;/a&gt;.&lt;/br&gt;
      &lt;/p&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can get an overview about all discussed changes and ideas in the &lt;a href=&quot;https://docs.google.com/document/d/1lFtgLm6hY-uECdA1r0Sfimq6vkVYThoUZsevPUaSP0E/edit&quot; target=&quot;_blank&quot;&gt;workshop document&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;improvements-for-interceptors-and-decorators&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#improvements-for-interceptors-and-decorators&quot; /&gt;Improvements for interceptors and decorators&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are several enhancements to interceptors and decorators in CDI that are planned for CDI 2.0. Some of them are to support AOP on custom or produced beans, to support AOP on inner calls and to improve the interceptor chaining. The work on these topics has not started yet. But there are some small enhancements that were already implemented with Weld 3.0.0.Alpha1. &lt;br&gt;
      As Jozef Hartinger described in his &lt;a href=&quot;http://weld.cdi-spec.org/news/2014/10/02/weld-300Alpha1/&quot; target=&quot;_blank&quot;&gt;release announcement&lt;/a&gt;, support for repeatable annotations was added for qualifiers and interceptor bindings. And the &lt;em&gt;javax.interceptor.InvocationContext&lt;/em&gt; interface was extended to make it easier to access the interceptor binding in the interceptor.&lt;/br&gt;
      &lt;/p&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You will find more information about it in the &lt;a href=&quot;https://drive.google.com/open?id=10iexiDfMT9tYaUPa2cGiw4P68VG_bryDIS0DKzP1ils&amp;amp;authuser=0&quot; target=&quot;_blank&quot;&gt;workshop document&lt;/a&gt; as soon as the work has started.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;cdi-for-java-se&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdi-for-java-se&quot; /&gt;CDI for Java SE&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI requires an up and running CDI container to process its components. This is usually no problem in an Java EE environment because the application server is taking care of the CDI container. But this is different in an Java SE environment, where the container has to be booted by the application. The main problem is, that the specification does not define an API to boot the container. Therefore Weld and Open Web Beans provide its own proprietary APIs to do it and &lt;a href=&quot;http://javaeesquad.blogspot.be/2014/12/cdi-for-java-se-already-standardised.html&quot; target=&quot;_blank&quot;&gt;Apache DeltaSpike offers an uniform API&lt;/a&gt; on top of that. Beginning with CDI 2.0 the start of the container shall be defined in the standard.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The work on this topic is still ongoing and there are several open questions that need to be answered in the upcoming discussions. You can read about  it in the &lt;a href=&quot;https://drive.google.com/open?id=1LgsGT-AAlrF72Z5pW4xNQiVjUHGUME46ZmB-wwF35Yw&amp;amp;authuser=0&quot; target=&quot;_blank&quot;&gt;workshop document&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;usage-of-java-8-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage-of-java-8-features&quot; /&gt;Usage of Java 8 features&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Java 8 was released in March 2014 and is therefore not used by the Java EE 7 specifications which were released in 2013. This will change with Java EE 8 and this means that CDI 2.0 can also make use of the new features. &lt;br&gt;
      The discussions about the influence of the new Java features on CDI are still in an early state, but there are several JEPs that seem to be applicable to improve the specification. Some of them, like the CompletionStage API and repeating annotations, are already used in the proposals for &lt;a href=&quot;http://weld.cdi-spec.org/news/2014/12/10/an-update-on-weld-3/#_asynchronous_events&quot; target=&quot;_blank&quot;&gt;asynchronous events&lt;/a&gt; and &lt;a href=&quot;http://weld.cdi-spec.org/news/2014/10/02/weld-300Alpha1/#_repeatable_qualifiers_and_interceptor_bindings&quot; target=&quot;_blank&quot;&gt;repeatable interceptor bindings&lt;/a&gt;. But the usage of the new Java 8 features will not be limited to the new CDI features, there will also be talks on how to improve the existing parts of the specification. &lt;br&gt;
      The current ideas can be found in this &lt;a href=&quot;https://drive.google.com/open?id=1KUaxXIXJ_r-h5UJGIij6I4vrLS7uXkeeeZr2SaRipWQ&amp;amp;authuser=0&quot; target=&quot;_blank&quot;&gt;document&lt;/a&gt;.&lt;/br&gt;
      &lt;/br&gt;
      &lt;/p&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;spi-and-context-enhancements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#spi-and-context-enhancements&quot; /&gt;SPI and context enhancements&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The work on SPI changes has also not started yet. Some goals of the CDI 2.0 specification will be to improve the access to all meta data created by CDI and to provide a way to add beans at runtime. The requested changes to provide a better control about contexts, especially to activate and deactivate them, will also require some SPI enhancements.&lt;br&gt;
      An additional huge topic will be the changes caused by the adoption of Java 8 and how to keep the SPI binary backward compatible.&lt;br&gt;
      The changes will be described in the &lt;a href=&quot;https://drive.google.com/open?id=1aK3aIQG-W9D72Ti9fj0xLFNmqxQtYyy_vjc6QgN3Z2Y&amp;amp;authuser=0&quot; target=&quot;_blank&quot;&gt;workshop document&lt;/a&gt;.&lt;/br&gt;
      &lt;/br&gt;
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;schedule&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#schedule&quot; /&gt;Schedule&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As described in the previous paragraphs, the work on the CDI 2.0 specification is ongoing and there are lots of things that need further discussions. An early draft of the specification, which will contain the most stable new features, shall be completed in Q1 of 2015. The public review shall start in Q3 of 2015 and provide feedback for the final release. The final version of the CDI 2.0 specification shall be released in Q1 of 2016.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2014/10/20/CDI-2_0-first-face-to-face-meeting-feedback.html</id>
    <title>CDI 2.0 first Face to face meeting feedback!</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2014-10-20T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2014/10/20/CDI-2_0-first-face-to-face-meeting-feedback.html" rel="alternate" type="text/html" />
    <category term="meeting"></category>
    <summary>
      Last week we had the first CDI 2.0 Face to Face meeting in Brno (Czech Republic). Check what was discussed and the first CDI 2.0 orientations
      
      
      Meeting Agenda
      
      
      As you may know, CDI 2.0 project was launched only six weeks ago, so we are still in early discussion stage regarding CDI 2.0 design. Yet our workshop organisation was a good entry point to start going in more deep discussion. So we based our discussion on existing workshop documents. Here are the main decisions that came out from our discussion.
      
      
      
      
      Parts introduction
      
      
      Parts concept is not the most visible change we would introduce in CDI...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last week we had the first CDI 2.0 Face to Face meeting in Brno (Czech Republic). Check what was discussed and the first CDI 2.0 orientations&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;meeting-agenda&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#meeting-agenda&quot; /&gt;Meeting Agenda&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As you may know, CDI 2.0 project was launched only six weeks ago, so we are still in early discussion stage regarding CDI 2.0 design. Yet our &lt;a href=&quot;http://www.cdi-spec.org/news/2014/10/06/CDI-20_working_method/&quot; target=&quot;_blank&quot;&gt;workshop&lt;/a&gt; organisation was a good entry point to start going in more deep discussion. So we based our discussion on existing workshop documents. Here are the main decisions that came out from our discussion.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;parts-introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parts-introduction&quot; /&gt;Parts introduction&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Parts concept is not the most visible change we would introduce in CDI 2.0 but since it’s probably the one with more impact on spec organisation, we started with this point to know if we should go in that direction. That answer was &lt;strong&gt;yes&lt;/strong&gt;.
      We also decided that each part would be independent from the other (i.e a bigger part wouldn’t depend from a smaller one but would integrate it) to solve API splitting issues. Having this principles accepted we talked about the possible parts and their content:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;CDI Light: a lightweight version of CDI without Normal Scopes, Interceptors and Decorators that would allow proxy-free implementations. We worked on the API present in this Part, you can have a look to what we proposed on this &lt;a href=&quot;https://github.com/antoinesd/cdi-spec/tree/CDI_20_LIGHT&quot; target=&quot;_blank&quot;&gt;branch&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;CDI Full: CDI as we know it today except for all the other spec integration (servlet, JSF, EJB, etc…​).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;CDI Java EE : CDI full including integration with other specs&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;events-enhancement&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#events-enhancement&quot; /&gt;Events enhancement&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The 2 main topics here were ordering and asynchronous events.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;asynchronous-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#asynchronous-events&quot; /&gt;Asynchronous events.&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The main idea was to adopt a different approach than the one in EJB today. Instead of using a &lt;code&gt;@Asynchronous&lt;/code&gt; annotation and manage a &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt; to deal with he end of asynchronous treatment, we looked for a way to provide callback to the event trigering.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The idea could be to add a &lt;code&gt;fireAsync()&lt;/code&gt; method to the &lt;code&gt;Event&amp;lt;T&amp;gt;&lt;/code&gt; and use Java 8 lambdas and add a functional interface like this :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@FunctionalInterface
      public interface EventCallBack&amp;lt;T&amp;gt; {
      
          void doCallback(T callBack);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;and use later like this&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Inject Event&amp;lt;Payload&amp;gt; evt; 
      
      public void fireAsyncWithCallBack() { 
          evt.fireAsync(new Payload(), callBack -&amp;gt; System.out.println(&quot;Job done”));
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Off course this approach has to be more deeply investigate (we’ll do it on our coming event meeting) but it has a lot of advantages :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Introduce a more modern approach of async events processing like we have in other framework or technologies&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Complete the EJB approach instead of duplicating it&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Avoid asking Java EE EG to extract @Asynchronous form EJB to put it somewhere else (where?)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;events-priority&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#events-priority&quot; /&gt;Events priority&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Discussion on event priority was open some weeks ago. We tried to have a fresh look to the idea. The main point was about using &lt;code&gt;@Priority&lt;/code&gt; annotation or not. The question is still not closed but we’re more in favor of the use of a value in &lt;code&gt;@Observes&lt;/code&gt; annotation. This value would give the order of the observer (the lowest being the first).
      The main reason to choose this approach instead of @Priority is the fact that while being part of java common annotation (JSR 250) spec, @Priority is not present in Java SE. So using it would :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;force us to ask for JSR 250 Maintenance release to allow priority on paramaters&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;add an extra dependency jar (for only one annotation) when using CDI Light in Java SE which seems against our &quot;light&quot; goal&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;code&gt;@Observes&lt;/code&gt; evolution evolution would give something like:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void firstObserver(@Observes(1) Payload pl) {}
      
      public void secondObserver(@Observes(2) Payload pl) {}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Priority value provided in &lt;code&gt;javax.interceptor.Interceptor.Priority&lt;/code&gt; would be duplicated in CDI to avoid useless dependency on Interceptor spec while keeping the same approach / values.
      This ordering could be also used to order step in extensions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;event-range&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#event-range&quot; /&gt;Event Range&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The idea behind event range would to provide a &quot;scope&quot; to events (i.e package, war, ear). It would prepare CDI event to become a server wide eventing system.
      The discussion came to the conclusion that while it’s rather easy to implement, it’s usage could be quite cumbersome.
      The idea was not discarded but we thought it was a good idea to check with community if the need was real.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;interceptors-and-decorators-aop-enhancement&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#interceptors-and-decorators-aop-enhancement&quot; /&gt;Interceptors and Decorators (AOP) enhancement&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There were a lot of discussions around enhancing interceptors and decorators. You’ll find the main topics below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;aop-on-custom-beans-and-producers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#aop-on-custom-beans-and-producers&quot; /&gt;AOP on custom beans and producers&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Conclusion was that it is doable but with certain limitations. Among them the fact that an interceptor on producer would be applied on all method of it (no obvious solution to target specifc methods).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We also discussed the syntax for binding interceptor to a produced bean. if you consider this code:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Produces
       @Loggable
       public  Foo produceMap() { 
          return new Foo(); 
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@Loggable&lt;/code&gt; interceptor binding is bound to the method not the produced bean. We have to find an easy way to bind the interceptor to the produced bean.
      The only solution we found was to use a Stereotype with the interceptor binding and put it on the producer. Not a direct solution but rather elegant.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;aop-on-internal-call-vs-self-injection-pattern&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#aop-on-internal-call-vs-self-injection-pattern&quot; /&gt;AOP on internal call vs self injection pattern&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We already discussed about supporting AOP on call make in the same bean (calling intercepted B method from method A with interceptor triggering).
      After discussion, it seemed very difficult to introduce this new feature and AOP support on produced and custom beans at the same time. So the idea was to ease the use of self injection pattern, providing something like this.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MyBean {
      
        @Inject
        Self&amp;lt;MyBean&amp;gt; mySelf;
      
        @Loggable
        public methodB() {
          ...
        }
      
        public methodA() {
          mySelf.get().methodB();
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;less elegant than having it directly on internal call but still useful.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;other-aop-topics&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#other-aop-topics&quot; /&gt;Other AOP topics&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We also discussed about the following topics:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;relaunching the idea of supporting decorator without interface&lt;/strong&gt; like it was requested in &lt;a href=&quot;https://issues.jboss.org/browse/CDI-403&quot; target=&quot;_blank&quot;&gt;CDI-403&lt;/a&gt; and before that in &lt;a href=&quot;https://issues.jboss.org/browse/CDI-224&quot; target=&quot;_blank&quot;&gt;CDI-224&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;standardise the &lt;a href=&quot;https://deltaspike.apache.org/documentation/partial-bean.html&quot;&gt;partial bean&lt;/a&gt; feature from Deltaspike&lt;/strong&gt;. For those who don’t know this feature an example can be found &lt;a href=&quot;https://github.com/jboss-developer/jboss-wfk-quickstarts/tree/2.6.0.Final/deltaspike-partialbean-advanced&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;java-se-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-se-support&quot; /&gt;Java SE support&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We had a long discussion on Java SE support in CDI 2.0. To decide that we should just provide a class like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class ContainerBoot {
      
          /**
           * Simple boot
           */
          static BeanManager initialize() {
            ...
          }
      
          /**
           * Boot with parameters
           */
          static BeanManager intialize(Map&amp;lt;?,?&amp;gt;) {
            ...
          }
          void shutdown() {}
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Discussions are still going on on this topic.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;spi-enhancement&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#spi-enhancement&quot; /&gt;SPI enhancement&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least we also discussed about SPI enhancement. The main topic were:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Give the possibility to modify/register beans at runtime&lt;/strong&gt;. The majority of present people were against this new feature. The ones in favor obtained that the door wouldn’t be closed now and that the community would be consulted to see if this need was &quot;real&quot;. So we’ll be back on this feature and if you want to see it, stay tune to give it your support when we’ll ask for it.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Add SPI to activate/deactivate contexts&lt;/strong&gt;. Right now built-in context cannot be activated / deactivated by third parties, forcing them to create their own implementation of such contexts instead of using the one provided by their implementation. This small modification will greatly ease CDI advanced integration in other spec or frameworks.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Add helpers to create CDI meta-data&lt;/strong&gt;. Today it’s not very convenient to create an &lt;code&gt;AnnotatedType&lt;/code&gt; or a custom &lt;code&gt;Bean&lt;/code&gt;. We decided to explore the introduction of helpers inspired by Deltaspike Builders. They would be provided by lifecycle event&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot; /&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here are the main topics we discussed during these 2 days. Other small feature will came to JIRA later. At this point there was only orientation and no final decision on any subject. So the door is still open for these as well as new feature. So don’t hesitate to give your advice andv your contribution to our &lt;a href=&quot;http://www.cdi-spec.org/&quot;&gt;workshop&lt;/a&gt; or &lt;a href=&quot;https://issues.jboss.org/browse/CDI&quot; target=&quot;_blank&quot;&gt;Jira server&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2014/10/06/CDI-20_working_method.html</id>
    <title>Working method for CDI 2.0</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2014-10-06T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2014/10/06/CDI-20_working_method.html" rel="alternate" type="text/html" />
    <category term="method"></category>
    <category term="EG"></category>
    <summary>
      Work on CDI 2.0 started at the beginning of september. As you may guess, specifying and releasing this new major version is a big challenge.
      
      
      To put all chance on our side we are looking for a strong commitment from the community (as explained in our previous post). That&#8217;s why the way we&#8217;ll be organised is very important.
      Thus, when we started thinking about our working method we came up with the following requirements:
      
      
      
      
      Keep the big picture of the spec in mind while working on all detail of each new / modified features
      
      
      Have the right balance between "ideal specification" and the "specification...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Work on CDI 2.0 started at the beginning of september. As you may guess, specifying and releasing this new major version is a big challenge.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To put all chance on our side we are looking for a strong commitment from the community (as explained in our &lt;a href=&quot;http://www.cdi-spec.org/news/2014/08/26/CDI-20_needs_you/&quot;&gt;previous post&lt;/a&gt;). That’s why the way we’ll be organised is very important.
      Thus, when we started thinking about our working method we came up with the following requirements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Keep the big picture of the spec in mind while working on all detail of each new / modified features&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Have the right balance between &quot;ideal specification&quot; and the &quot;specification only driven by implementation&quot; approaches&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Be able to welcome new contributors (even casual ones) without loosing them in spec history or advanced technical details at the beginning&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Give visibility to third party (other JSR or future implementor) of the spec without forcing them to follow our ML, IRC, JIRA&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Get feedback from the community easily while designing the spec&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To satisfy these points we came to the idea of creating different workshop on big CDI topics (existing and new). To begin we identified these workshops:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Parts (modularity) : how we can make CDI more modular by extracting sub part in the spec to allow it to grow without becoming bloated&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Java SE support :  how CDI should work in Java SE and what SPI should we add or standardise to ease its integration in home brewed stacks&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Events enhancement : bringing asynchronicity or ordering to events. Can it be extended to all Java EE&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Interceptor &amp;amp; Decorator : AOP support on produced or custom bean. Work with interceptor spec to add AOP on inner call&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;SPI enhancement for integration : give access to all metadata produced by the container, give control of CDI from outside code, support Bean addition / modification @ Runtime&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Contexts enhancement : go beyond the the thread-bound request-response model used by context today to support new application architecture&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Java 8 enhancement : see how new features in java 8 (type annotation, annotation repetition, lambdas, streams, default methods, type inference…) could enhance CDI in existing and new features.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To ease this big picture approach we also adopted this following step to deal with each workshop:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Blueprint draft : the workgroup lead propose a draft document describing his global idea of how the future should work&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Draft discussion The draft is commented, amended, enhanced by the group which can react to the doc by proposing new ideas. and When people feel ready by the EG&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Detailled task / requirement: after the discussion, each adopted concept are translated in on or more tickets in our Jira to follow their realisation to start more detailled discussion&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Spec and TCK enhancement: each task is translated to the new specification document and translated to the TCK&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Of course these steps are more guidelines than a strong workflow, it’s a way to ease contribution not constraint it. It will probably evolve with time.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On our &lt;a href=&quot;http://www.cdi-spec.org/&quot;&gt;home page&lt;/a&gt; you’ll find the list of each workshop and their current status and links (working doc, Jira EPICS, etc…​). Please feel free to check these links and give your feedback and don’t heistate to contribute with your idea on this documents.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2014/08/26/CDI-20_needs_you.html</id>
    <title>CDI 2.0 needs you</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2014-08-26T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2014/08/26/CDI-20_needs_you.html" rel="alternate" type="text/html" />
    <category term="EG"></category>
    <category term="community"></category>
    <category term="method"></category>
    <summary>
      The work on CDI 2.0 specification is about to start in the coming weeks. We have a lot of ambitious features on the table as you can check in our previous article, but we also have only 18 months to specify and implement them. Without community help, we probably won&#8217;t be able to do all the change we are planning, so your contribution is precious to us. In this post I&#8217;ll explain the multiple ways you can be part of it, even if you only have a few hours a week to help us and/or are not a CDI, JCP...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;span class=&quot;image&quot; style=&quot;float: left&quot;&gt;&lt;img src=&quot;http://www.cdi-spec.org/images/UncleDuke.png&quot; alt=&quot;Uncle Duke&quot; width=&quot;150&quot; /&gt; The work on CDI 2.0 specification is about to start in the coming weeks. We have a lot of ambitious features on the table as you can check in our previous &lt;a href=&quot;http://www.cdi-spec.org/news/2014/07/28/what-s-in-CDI-20-jsr-proposal/&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt;, but we also have only 18 months to specify and implement them. Without community help, we probably won’t be able to do all the change we are planning, so your contribution is precious to us. In this post I’ll explain the multiple ways you can be part of it, even if you only have a few hours a week to help us and/or are not a CDI, JCP or a Java expert. Let’s check the 3 main question most of you have regarding contribution and try to answer them:&lt;/span&gt;
      &lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Why should I contribute?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Is it possible for me to contribute?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;How do I start contributing?&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;why-should-i-contribute-to-cdi-2-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-should-i-contribute-to-cdi-2-0&quot; /&gt;Why should I contribute to CDI 2.0?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Contributing to a specification like CDI looks like any other Open Source contribution (by the way CDI specification and deliverable are under the &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0.html&quot; target=&quot;_blank&quot;&gt;Apache License version 2&lt;/a&gt;) yet it’s very different. The following points will detail these differences.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;working-on-architecture-and-concepts-first&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#working-on-architecture-and-concepts-first&quot; /&gt;Working on Architecture and concepts first&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The biggest difference between working on a standard OSS project and a specification is probably the fact that the first job is to write detailled documentation (the specification document).
      Regarding specification document, the content should be very accurate and respect a certain set of rules among them:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;use an homogenous style in simple yet understandable english across the doc,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;as specification cannot be changed easily, the work must be very precise, consequences of a choice must be analysed deeply and ambiguities in definitions shouldn’t exist,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;stick to &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/index.html&quot; target=&quot;_blank&quot;&gt;Java language Specification&lt;/a&gt; (JSL) rules and terms,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;avoid &lt;a href=&quot;http://en.wikipedia.org/wiki/Denormalization&quot;&gt;denormalization&lt;/a&gt;: the specification should use cross references to point to an existing definition instead of duplicating it,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;avoid mentioning how features should be implemented while keeping in mind that specified features will have to be implemented at the end.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;participating-to-code-writing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#participating-to-code-writing&quot; /&gt;Participating to code writing.&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Specification is useless without implementations. So after (and sometimes while) thinking, comes code writing. First the API, the code that all specifications will have to implement and then as a proof of concept of the specification we have to provide the RI (reference implementation) and TCK (Technology Compatibility Kit) which is mandatory for developing other implementations. So you can also be useful by contributing to &lt;a href=&quot;http://weld.cdi-spec.org/&quot;&gt;JBoss Weld&lt;/a&gt; and the &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck&quot;&gt;CDI TCK&lt;/a&gt; which is the translation of the specification in a test suite. Off course these will ask more time and probably more skills for a contribution.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;contributing-to-the-future-of-java-ee-and-java-se&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributing-to-the-future-of-java-ee-and-java-se&quot; /&gt;Contributing to the future of Java EE and Java SE&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI 2.0 will be part of Java EE 8 but also targets Java SE. Therefore, we’d like to make CDI the Dependency Injection standard for Java. It already plays this role for Java EE. So contributing to the CDI 2.0 specification is a way to be part to the future of Java and Java applications architecture.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;being-at-the-source-of-a-lot-of-other-projects&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#being-at-the-source-of-a-lot-of-other-projects&quot; /&gt;Being at the source of a lot of other projects&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Working on CDI specification is also a way to indirectly work at (and thus, have impact on) other projects linked to it. The implementations (Apache OpenWebBeans and JBoss Weld) are off course the obvious ones, but today there are a lot of other open source frameworks or projects out there based on CDI. &lt;a href=&quot;http://deltaspike.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Deltaspike&lt;/a&gt;, &lt;a href=&quot;http://www.vraptor.org/&quot; target=&quot;_blank&quot;&gt;VRaptor&lt;/a&gt; or &lt;a href=&quot;http://www.openbravo.com/&quot; target=&quot;_blank&quot;&gt;Openbravo&lt;/a&gt; are some example of these (you can also consider most of JBoss Java frameworks which use CDI to be integrated).
      Working on CDI is a way to help these projects to become better or give you the knowledge to contribute to them in the future to help them getting the best of CDI 2.0 when it will be released.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;is-it-possible-for-me-to-contribute&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#is-it-possible-for-me-to-contribute&quot; /&gt;Is it possible for me to contribute?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Most people disqualified themselves when it comes to contribute to a JSR. The 3 most frequent reason given are:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;the technical level,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the lack of time or,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the &quot;paperwork&quot; tied to such a contribution.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s review these &quot;good&quot; excuses that could make one thinks &quot;contributing is not for me&quot;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;technical-level&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#technical-level&quot; /&gt;Technical level&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Ok, if you are an absolute beginner in Java and CDI, it will be hard to help without making others loose their time. But as you’re reading these lines, you are probably not an absolute beginner ;). One of our goal on CDI 2.0 is to make the specification as easy as possible to read. So even if you are not a top notch Java specialist, your reading skill and feedback on badly written, ambiguous or hard to understand part will be very precious to the Expert Group.
      Regarding Java Level, CDI 2.0 will leverage a lot of new features coming with Java SE 8 on which most of the contributors will have very little experience. So, on this topic specialists will be the exception.
      To make short, the minimum level to contribute is to have a reasonable knowledge on Java (enough to know your unknown and where to look to learn), have already used CDI in development, have a good knowledge of its features (DI, Events, AOP, Extensions…​) and be able to read english.
      That makes a lot of people qualified to help.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;time&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#time&quot; /&gt;Time&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;From the previous point you can understand that there is no minimum amount of time for contribution. For instance you can read a specification chapter and propose corrections or remarks on it, it will take you 2 or 3 hours on the 18 months of the specification. Now the best would be to provide a few hours a week. To help people that want to contribute and don’t have much time, we’ll try to provide a monthly synthesis of topics worked on the project to spare their time and avoid the &quot;I’d like to do something but I don’t have time to dig thru all the mailing list and Jira message to figure out what to do&quot;. These reports will also be useful for the EG members to have a big picture vision of the work regulary.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;paper-work&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#paper-work&quot; /&gt;Paper work&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To be officially enrolled on a JCP Expert Group requires a little paper work. You’ll have to create an account on &lt;a href=&quot;http://jcp.org&quot; target=&quot;_blank&quot;&gt;jcp.org&lt;/a&gt; and sign the Java Specification Agreement (JSPA). You’ll probably have to ask you employeer an agreement to contribute. And then ask the spec lead to be part of the JSR. On the JSR side, we never refused a member in the EG in the past and plan to continue like that for the new JSR&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The good news is that we also accept non official contributions as any other Open Source project using ASL2. So if you don’t feel like signing JCP stuff, you can still participate to discussion on the Mailing list, the IRC channel or our JIRA site. You can even send pull request on the project. The only difference will be that you won’t be mentioned as a member of the expert group on the JCP website.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So to make short. You can start contributing with no paper work. Stay anonymous during all the project or decide to officially join the EG at any time before the end of the JSR. The only limit would be if you start doing big contribution. In this case we’ll probably ask you to join EG to avoid any future IP issues.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;how-do-i-start-contributing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-do-i-start-contributing&quot; /&gt;How do I start contributing?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The best place to start is probably the &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/cdi-dev&quot; target=&quot;_blank&quot;&gt;Mailing List&lt;/a&gt;, or if you want a more informal you can begin with the IRC channel(#cdi-dev on freenode). All the information regarding communication channel of the spec is detailled on the &lt;a href=&quot;http://www.cdi-spec.org/contribute&quot;&gt;contribute&lt;/a&gt; page.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You also should start reading the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec-1.2.pdf&quot; target=&quot;_blank&quot;&gt;existing specification&lt;/a&gt; to become familiar with its content and its style.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Finally, as the specification is written in asciidoc (with the excellent asciidoctor implementation), you should also start learning it. The best place is probably the &lt;a href=&quot;http://asciidoctor.org/docs/user-manual/&quot; target=&quot;_blank&quot;&gt;Asciidoctor user manual&lt;/a&gt;. As we’re using asciidoctor maven plugin to generate the doc you won’t have to install asciidoc toolchain, only Maven. You’ll also nedd a text editor with optionally plugins to help writing asciidoc. &lt;a href=&quot;https://atom.io/&quot;&gt;Atom editor&lt;/a&gt; with asciidoc language and asciidoc preview plugins is a good solution, but there are plenty of others depending on your taste and current tools.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-next&quot; /&gt;What’s next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are currently preparing the organization of the work around the specification. The goal is to be as efficient as possible regarding contribution. The Mailing List is the best place to stay tuned. In the meantime you can do &quot;homework&quot; with the existing material.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot; /&gt;Conclusion?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are trying to make CDI 2.0 a very open specification to give to the community the possibility to contribute easily to this great project. We are thrilled to count you onboard for any contribution (big or small) you’ll be able to do, making CDI 2.0 your specification.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2014/07/28/what-s-in-CDI-20-jsr-proposal.html</id>
    <title>What's in CDI 2.0 JSR proposal?</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2014-07-28T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2014/07/28/what-s-in-CDI-20-jsr-proposal.html" rel="alternate" type="text/html" />
    <category term="JSR"></category>
    <category term="proposal"></category>
    <summary>
      A few days ago, we submitted the official proposal for CDI 2.0. This new version is focused on 2 main goal:
      
      
      
      
      Adding Java SE support to CDI
      
      
      Add modularity to CDI to ease its integration with other specification or framework.
      
      
      
      
      Off course a lot of feature and enhancement will come from this 2 goals and we&#8217;ll add a few more if possible. Let&#8217;s check what&#8217;s on the menu.
      
      
      A new name
      
      
      Not the most important part, but as we plan supporting Java SE, we slightly changed the name of the specification. Previously, the full name of CDI was: Contexts and Dependency Injection for Java EE....
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A few days ago, we submitted the official proposal for CDI 2.0. This new version is focused on 2 main goal:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Adding Java SE support to CDI&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Add modularity to CDI to ease its integration with other specification or framework.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Off course a lot of feature and enhancement will come from this 2 goals and we’ll add a few more if possible. Let’s check what’s on the menu.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;a-new-name&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-new-name&quot; /&gt;A new name&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Not the most important part, but as we plan supporting Java SE, we slightly changed the name of the specification. Previously, the full name of CDI was: &lt;strong&gt;Contexts and Dependency Injection for Java EE&lt;/strong&gt;. The proposed new name is: &lt;strong&gt;Contexts and Dependency Injection for Java&lt;/strong&gt;. So to SE we go ;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;new-features-and-enhancement-proposed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features-and-enhancement-proposed&quot; /&gt;New features and enhancement proposed&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Beyond the two main points introduced above (or because of them), we have the following features in mind&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;identify-the-java-ee-part-in-cdi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#identify-the-java-ee-part-in-cdi&quot; /&gt;Identify the Java EE part in CDI&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We have a lot of work to prepare the Java SE support in CDI. The first will be to check what’s is pure CDI and what’s is link to Java EE.
      So for CDI 2.0, The specification and TCK require a significant overhaul to be split into two parts.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Part 1: The core CDI programming model (usable in EE and SE as well)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Part 2: Java EE integrations for CDI (i.e. all the feature that won’t be available when working in Java SE).&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Some of the splitting is straight forward (thre’s no EJB in Java SE), other could bring some discussion and extra work (do we want to support &lt;code&gt;@Transactional&lt;/code&gt; in Java SE and how?).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;defining-a-portable-bootstrap-api-for-cdi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#defining-a-portable-bootstrap-api-for-cdi&quot; /&gt;Defining a portable bootstrap API for CDI.&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Currently CDI does not define an API for bootstrap, instead relying on a Java EE deployment to start the container.
      To add support for Java SE, we really need such an API. Additionally, we would like to introduce a programmatic API for binding beans, allowing much greater flexibility for portably wiring a container.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;enhance-the-cdi-context-model&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#enhance-the-cdi-context-model&quot; /&gt;Enhance the CDI context model&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The context model in CDI is based around the thread-bound request-response model. This model is more prevalent in web applications than elsewhere, and, also is less pervasive than it once was. We would like to overhaul the context model to allow the application or container to portably push the active context to CDI when it requires the use of CDI. This change would be largely transparent to applications, and we might want to consider an API facade over it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;introduce-modularity-to-cdi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduce-modularity-to-cdi&quot; /&gt;Introduce modularity to CDI.&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;One of the most often given reason by other JSR or frameworks to limit their CDI adoption is the size of the specification. Too big, too many features.
      CDI is becoming an important component model in Java EE, and we think that learning from the experience of long running specifications of specifications (like EJB) is important. Before we starting adding features to CDI, we want to see if we can introduce “parts”, to avoid creating a spec that gives the impression of being big and heavy.
      There’s already some preparation work around this topic. For instance JAX-RS asked if it was possible to only have only the event part of CDI. Other discussion with the future java config specification are dealing with a &quot;type discovery&quot; part.
      One of the most asked module is a lightweight container, which takes the annotations specified by the @Inject specification, defines the behavior of the container (which @Inject failed to do), and adds a couple of popular features from CDI such as producer methods. This will allow much wider adoption of CDI in the Java world, and provide a great stepping stone between Java SE, a servlet container, OSGi and a full Java EE server.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;other-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#other-features&quot; /&gt;Other features&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Off course there’ll be other features introduced in CDI 2.0. They come from&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Standardization of existing extension like the ones created in &lt;a href=&quot;http://deltaspike.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Deltaspike&lt;/a&gt; project&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Request from our &lt;a href=&quot;http://www.cdi-spec.org/news/2014/05/28/CDI-2_0-survey/&quot; target=&quot;_blank&quot;&gt;CDI 2.0 survey&lt;/a&gt; which will close on july 31st&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Features coming from other Java EE 8 spec, like &lt;code&gt;@Transactional&lt;/code&gt; was introduced in CDI 1.1 after it was extracted from EJB spec.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;next-step&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#next-step&quot; /&gt;Next Step&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The proposal is being discussed among JCP executive committee members and if everything goes well it should be accepted in the coming days. At this moment we’ll start forming the CDI 2.0 Expert Group and begin effective work around this specification.
      We hope deliver the final spec in Q4 2015 or Q1 2016. Stay tuned on this blog or on &lt;a href=&quot;http://twitter.com/cdispec&quot;&gt;@cdispec&lt;/a&gt; to have fresh news regarding the spec and the coming expert group.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2014/05/28/CDI-2_0-survey.html</id>
    <title>CDI 2.0 Survey</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2014-05-28T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2014/05/28/CDI-2_0-survey.html" rel="alternate" type="text/html" />
    <category term="survey"></category>
    <summary>
      Loading......
    </summary>
    <content type="html">
      &lt;iframe src=&quot;https://docs.google.com/forms/d/1R18nS65GshO46YCcksTTVILlAlgyk8PA5Vu7zJPDx2U/viewform?embedded=true&quot; width=&quot;760&quot; height=&quot;350&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Loading...&lt;/iframe&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2014/04/14/CDI-1_2-released.html</id>
    <title>CDI 1.2 released</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2014-04-14T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2014/04/14/CDI-1_2-released.html" rel="alternate" type="text/html" />
    <category term="release"></category>
    <summary>
      After one year of existence, the CDI 1.1 specification is updated by a maintenance release. This maintenance review known as CDI 1.2 was adopted by the JCP with 24 yes and one Expert Member forgetting to vote. The minor increment (from 1.1 to 1.2) instead of a 1.1-SP1 is due to the the fact that we changed the javadoc and the TCK but beyond that there are far less changes from 1.1 to 1.2 than from 1.0 to 1.1.
      That&#8217;s being said, CDI 1.2 brings a lot of clarifications and small behavior changes. Let&#8217;s check what&#8217;s on the menu.
      
      
      Major changes
      
      
      Some of...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After one year of existence, the CDI 1.1 specification is updated by a maintenance release. This maintenance review known as CDI 1.2 was adopted by the &lt;a href=&quot;https://jcp.org/en/jsr/results?id=5623&quot; target=&quot;_blank&quot;&gt;JCP&lt;/a&gt; with 24 yes and one Expert Member forgetting to vote. The minor increment (from 1.1 to 1.2) instead of a 1.1-SP1 is due to the the fact that we changed the javadoc and the TCK but beyond that there are far less changes from 1.1 to 1.2 than from 1.0 to 1.1.
      That’s being said, CDI 1.2 brings a lot of clarifications and small behavior changes. Let’s check what’s on the menu.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;major-changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#major-changes&quot; /&gt;Major changes&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Some of these changes are only big clarifications but some other have an impact on the implementations (these last ones have an asterisk in their title below). In order to use them you’ll have to grab a CDI 1.2 implementation (more info at the end of this post).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;rethinking-the-default-bean-discovery-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rethinking-the-default-bean-discovery-mode&quot; /&gt;Rethinking the default bean discovery mode *&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The default bean discovery mode (&lt;code&gt;annotated&lt;/code&gt;) that allows CDI to be activated by default in Java EE 7 without &lt;code&gt;beans.xml&lt;/code&gt;, file was the root of a lot of issues with other frameworks implementing the AtInject specification (JSR-330) or with libraries thought to be used with such frameworks.
      To solve these issues we changed the set of &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bean_defining_annotations&quot; target=&quot;_blank&quot;&gt;Bean defining annotations&lt;/a&gt; (class annotations that make a class an implicit bean candidate) :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;all pseudo scopes annotations except &lt;code&gt;@Dependent&lt;/code&gt; were removed,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;@Interceptor&lt;/code&gt; and &lt;code&gt;@Decorator&lt;/code&gt; were added,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;all stereotype annotations (annotations annotated with &lt;code&gt;@Stereotype&lt;/code&gt;) were added.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;clarification-of-conversation-resolution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#clarification-of-conversation-resolution&quot; /&gt;Clarification of conversation resolution&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Conversation resolution mechanism could bring conflicts with servlet spec as stated in &lt;a href=&quot;https://issues.jboss.org/browse/CDI-411&quot; target=&quot;_blank&quot;&gt;CDI-411&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We clarified the fact that implementation should prevent these conflict during conversation resolution in &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec-diff.html#conversation_context&quot; target=&quot;_blank&quot;&gt;conversation context lifecycle&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;rework-on-event-chapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rework-on-event-chapter&quot; /&gt;Rework on event chapter&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You think you know how event resolution works in CDI? If you gained this knowledge by a careful reading of chapter 10 of the specification, think again. This chapter had a lot of approximations and confusing mentions. It was reviewed and partly rewritten (and yes, &lt;code&gt;@Any&lt;/code&gt; is totally useless for &lt;code&gt;Event&amp;lt;&amp;gt;&lt;/code&gt; injection, event firing and observers resolution).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This chapter is worth the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#events&quot; target=&quot;_blank&quot;&gt;re-reading&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can also check the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec-diff.html#events&quot; target=&quot;_blank&quot;&gt;diff&lt;/a&gt;, if you prefer.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;beanmanager-more-permissive-during-initialization&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#beanmanager-more-permissive-during-initialization&quot; /&gt;BeanManager more permissive during initialization *&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In CDI 1.1, some BeanManager methods couldn’t be called before the &lt;code&gt;AfterDeploymentValidation&lt;/code&gt; was fired. A non portable behavior was tolerated to allow use of these in &lt;code&gt;AfterBeanDiscovery&lt;/code&gt; observers. These brought confusing mention in specification and javadoc. We decided to standardized the non portable behavior (not a big deal since all implementations adopted it). So in CDI 1.2 the following &lt;code&gt;BeanManager&lt;/code&gt; method can be called (with restrictions) in an &lt;code&gt;AfterBeanDiscovery&lt;/code&gt; observer method:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;getBeans(String)&lt;/code&gt;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;getBeans(Type, Annotation…​)&lt;/code&gt;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;getPassivationCapableBean(String)&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;resolve(Set)&lt;/code&gt;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;resolveDecorators(Set, Annotation…​)&lt;/code&gt;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;resolveInterceptors(InterceptionType, Annotation…​)&lt;/code&gt;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;resolveObserverMethods(Object, Annotation…​)&lt;/code&gt;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;validate(InjectionPoint)&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;more details on the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec-diff.html#beanmanager&quot; target=&quot;_blank&quot;&gt;diff&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;clarification-on-container-lifecycle-event-use&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#clarification-on-container-lifecycle-event-use&quot; /&gt;Clarification on container lifecycle event use&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We clarified the fact these event should only be used during invocation of their observer methods.
      Check the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec-diff.html#init_events&quot; target=&quot;_blank&quot;&gt;diff&lt;/a&gt; of the whole 11.5 paragraph&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;rework-on-the-initialization-phase-parts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rework-on-the-initialization-phase-parts&quot; /&gt;Rework on the initialization phase parts&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Description of initialization phase in chapter 11 &amp;amp; 12 was very messing. No chronological ordering of event fired by the container, missing events. For instance we forgot to speak with &lt;code&gt;ProcessInjectionPoint&lt;/code&gt; and &lt;code&gt;ProcessBeanAttributes&lt;/code&gt; and &lt;code&gt;ProcessProducer&lt;/code&gt; was wrongly placed before &lt;code&gt;ProcessBean&lt;/code&gt; in chapter 12.
      So if you’re planning to write portable extensions you should perhaps re-read  &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#http://docs.jboss.org/cdi/spec/1.2/cdi-spec-diff.html#packaging_deployment&quot; target=&quot;_blank&quot;&gt;chapter 12&lt;/a&gt;. Not yet a page turner but far more accurate than it use to be.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;cdi-api-now-officially-supporting-osgi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdi-api-now-officially-supporting-osgi&quot; /&gt;CDI API now officially supporting OSGi&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We integrated all OSGi bundle information in CDI 1.2 api jar. So now it’ll be easier to use CDI in OSGi environment. Before that you had to grab a special OSGi release of CDI 1.1 to have the good bundle info in our &lt;code&gt;META-INF/MANIFEST.MF&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;more-minor-changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#more-minor-changes&quot; /&gt;More minor changes&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can check the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#_major_changes&quot; target=&quot;_blank&quot;&gt;change section&lt;/a&gt; of the spec to check the more minor changes we introduces in the spec.
      We also work on Javadoc to synchronize it with the specification by updating it or correcting the spec when api description were wrong.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;concrete-stuff&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#concrete-stuff&quot; /&gt;Concrete stuff&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You’ll find concrete raw and final data in the links below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;You’re interested by the release notes? it’s &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?version=12323655&amp;amp;styleName=Html&amp;amp;projectId=12311062&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;You want to check the diff between CDI 1.1 spec and CDI 1.2 spec? You’ll find it &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec-diff.html&quot; target=&quot;_blank&quot;&gt;there&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;You can’t wait to read this new spec, the Javadoc or use with the API or TCK? Go to our &lt;a href=&quot;http://www.cdi-spec.org/download&quot; target=&quot;_blank&quot;&gt;download page&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;You want to start coding in CDI 1.2? Good news reference implementation (Weld 2.2.0) is available and provide all that’s needed to be integrated to a Java EE 7 server. More information on &lt;a href=&quot;http://weld.cdi-spec.org/news/2014/04/15/weld-220-final/&quot; target=&quot;_blank&quot;&gt;Weld 2.2.0 announcement&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2014/02/13/TCK-1_1_3-release.html</id>
    <title>CDI TCK 1.1.3.Final released</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2014-02-13T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2014/02/13/TCK-1_1_3-release.html" rel="alternate" type="text/html" />
    <category term="release"></category>
    <summary>
      We&#8217;ve just released CDI TCK 1.1.3.Final - the third bugfix version for CDI 1.1. The artifacts are available in the Maven central repository and the distribution zip file on sourceforge.net.
      
      
      Note that the exclude list in the canonical TestNG config file is clean now.
      
      
      See also the list of resolved issues:
      Here...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We’ve just released CDI TCK 1.1.3.Final - the third bugfix version for CDI 1.1. The artifacts are available in the Maven central repository and the distribution zip file on &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/CDI-TCK/1.1.3.Final/&quot; target=&quot;_blank&quot;&gt;sourceforge.net&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note that the exclude list in the canonical &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/blob/1.1/impl/src/main/resources/tck-tests.xml&quot;&gt;TestNG config file&lt;/a&gt; is clean now.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See also the list of resolved issues:
      &lt;a href=&quot;https://issues.jboss.org/issues/?jql=fixVersion%20%3D%20%221.1.3.Final%22%20AND%20project%20%3D%20CDITCK&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2013/12/17/Make-3-CDI-2_0-wishes.html</id>
    <title>Make 3 CDI 2.0 Wishes</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2013-12-17T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2013/12/17/Make-3-CDI-2_0-wishes.html" rel="alternate" type="text/html" />
    <category term="survey"></category>
    <summary>
      Loading......
    </summary>
    <content type="html">
      &lt;iframe src=&quot;https://docs.google.com/forms/d/1AEQthlREvqd1fHMM5Ea8lyHfKiPlgiJS9omfnM8DLeQ/viewform?embedded=true&quot; width=&quot;760&quot; height=&quot;350&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Loading...&lt;/iframe&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2013/12/16/EG-meeting.html</id>
    <title>CDI EG meeting 12/16/2013 notes on CDI 1.2</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2013-12-16T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2013/12/16/EG-meeting.html" rel="alternate" type="text/html" />
    <category term="meeting"></category>
    <summary>
      The following people assisted this meeting :
      
      
      
      
      Mark Struberg (ms)
      
      
      Joseph Bergmark(jb)
      
      
      Jozef Hartinger (jh)
      
      
      Martin Kouba (mk)
      
      
      JJ Snyder (jj)
      
      
      Phil Zampino (pz)
      
      
      Antoine Sabot-Durand (asd)
      
      
      
      
      Proposed Agenda
      
      
      The following agenda was proposed
      
      
      
      
      Discussion on the last ticket pending : CDI-395 Public fields in extensions should not be allowed
      
      
      Last second ticket
      
      
      Next step for the MR.
      
      
      
      
      
      
      Discussion on CDI-395
      
      
      We were waiting on implementation feedback on this point. jh told us that there was too much risk to create retro-compatibility issues. So it was decided to remove CDI-395 from MR.
      
      
      
      
      Last minute issues
      
      
      
      
      
      
      
      
      
      
      Jira
      Description
      Decision
      Note
      
      
      
      
      CDI-408
      bean-discovery-mode="annotated" and Producers/Observers in @Dependent beans
      in MR
      
      
      
      CDI-410
      @RequestScoped Javadoc outdated
      in MR
      
      
      
      CDI-388
      Session bean specialization example is not valid
      in MR
      
      
      
      CDI-376
      BeanManager#getProducerFactory return type differs between...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The following people assisted this meeting :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Mark Struberg (ms)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Joseph Bergmark(jb)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Jozef Hartinger (jh)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Martin Kouba (mk)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;JJ Snyder (jj)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Phil Zampino (pz)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Antoine Sabot-Durand (asd)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;proposed-agenda&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#proposed-agenda&quot; /&gt;Proposed Agenda&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The following agenda was proposed&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Discussion on the last ticket pending : CDI-395 Public fields in extensions should not be allowed&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Last second ticket&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Next step for the MR.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;discussion-on-cdi-395&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#discussion-on-cdi-395&quot; /&gt;Discussion on CDI-395&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We were waiting on implementation feedback on this point. &lt;strong&gt;jh&lt;/strong&gt; told us that there was too much risk to create retro-compatibility issues. So it was decided to remove CDI-395 from MR.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;last-minute-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#last-minute-issues&quot; /&gt;Last minute issues&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
      &lt;colgroup&gt;
      &lt;col style=&quot;width: 8.3333%;&quot;&gt;
      &lt;col style=&quot;width: 50%;&quot;&gt;
      &lt;col style=&quot;width: 8.3333%;&quot;&gt;
      &lt;col style=&quot;width: 33.3334%;&quot;&gt;
      &lt;/col&gt;
      &lt;thead&gt;
      &lt;tr&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Jira&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Decision&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Note&lt;/th&gt;
      &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-408&quot; target=&quot;_blank&quot;&gt;CDI-408&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;bean-discovery-mode=&quot;annotated&quot; and Producers/Observers in @Dependent beans&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-410&quot; target=&quot;_blank&quot;&gt;CDI-410&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@RequestScoped Javadoc outdated&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-388&quot; target=&quot;_blank&quot;&gt;CDI-388&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Session bean specialization example is not valid&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-376&quot; target=&quot;_blank&quot;&gt;CDI-376&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BeanManager#getProducerFactory return type differs between API and spec&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-411&quot; target=&quot;_blank&quot;&gt;CDI-411&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CDI conversation activation conflicts with the Servlet spec&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Pending&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;needs some test before decicing if we can include it in MR. Test leaded by &lt;strong&gt;jh&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
      &lt;/col&gt;
      &lt;/col&gt;
      &lt;/col&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;next-step&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#next-step&quot; /&gt;Next Step&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The list is now closed (except for 411) It’s accessible &lt;a href=&quot;../CDI-1-2-issues-list&quot;&gt;here&lt;/a&gt; and in &lt;a href=&quot;http://s.shr.lc/1dL7BrF&quot;&gt;Jira&lt;/a&gt;.
      The Maintenance Release will be officially launch on the 6th january week. By then, work and discussion can start on the ticket chosen for this MR.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.cdi-spec.org/news/2013/12/16/CDI-1-2-issues-list.html</id>
    <title>Conclusion of EG preparation on CDI 1.2</title>
    <updated>2020-09-18T08:53:43+02:00</updated>
    <published>2013-12-16T00:00:00+00:00</published>
    <link href="http://www.cdi-spec.org/news/2013/12/16/CDI-1-2-issues-list.html" rel="alternate" type="text/html" />
    <category term="EG"></category>
    <category term="features"></category>
    <summary>
      Updated on 01/07/2014
      
      
      We finished to deal with the list of 28 Jira we planned to introduce or not in MR. So 24 of them will be in MR and 4 won&#8217;t. The list is also accessible on Jira.
      
      
      
      
      
      
      
      
      
      
      Jira
      Description
      Decision
      Note
      
      
      
      
      CDI-413
      Update outdated license
      in MR
      
      
      
      CDI-408
      bean-discovery-mode="annotated" and Producers/Observers in @Dependent beans
      in MR
      
      
      
      CDI-410
      @RequestScoped Javadoc outdated
      in MR
      
      
      
      CDI-388
      Session bean specialization example is not valid
      in MR
      
      
      
      CDI-376
      BeanManager#getProducerFactory return type differs between API and spec
      in MR
      
      
      
      CDI-377
      automatic JSR-330 annotation processing problematic
      in MR
      Mention needed and perhaps a new feature
      
      
      CDI-380
      Clarify SessionScoped
      in MR
      We should be less descriptive and like for CDI-381 add a general statement telling that other spec/extensions can change the behavior of built-in...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Updated on 01/07/2014&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We finished to deal with the list of 28 Jira we planned to introduce or not in MR. So 24 of them will be in MR and 4 won’t. The list is also accessible on &lt;a href=&quot;http://s.shr.lc/1dL7BrF&quot;&gt;Jira&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
      &lt;colgroup&gt;
      &lt;col style=&quot;width: 8.3333%;&quot;&gt;
      &lt;col style=&quot;width: 50%;&quot;&gt;
      &lt;col style=&quot;width: 8.3333%;&quot;&gt;
      &lt;col style=&quot;width: 33.3334%;&quot;&gt;
      &lt;/col&gt;
      &lt;thead&gt;
      &lt;tr&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Jira&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Decision&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Note&lt;/th&gt;
      &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-413&quot; target=&quot;_blank&quot;&gt;CDI-413&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Update outdated license&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-408&quot; target=&quot;_blank&quot;&gt;CDI-408&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;bean-discovery-mode=&quot;annotated&quot; and Producers/Observers in @Dependent beans&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-410&quot; target=&quot;_blank&quot;&gt;CDI-410&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@RequestScoped Javadoc outdated&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-388&quot; target=&quot;_blank&quot;&gt;CDI-388&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Session bean specialization example is not valid&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-376&quot; target=&quot;_blank&quot;&gt;CDI-376&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BeanManager#getProducerFactory return type differs between API and spec&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-377&quot; target=&quot;_blank&quot;&gt;CDI-377&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;automatic JSR-330 annotation processing problematic&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Mention needed and perhaps a new feature&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-380&quot; target=&quot;_blank&quot;&gt;CDI-380&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify SessionScoped&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;We should be less descriptive and like for CDI-381 add a general statement telling that other spec/extensions can change the behavior of built-in scope&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-372&quot; target=&quot;_blank&quot;&gt;CDI-372&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;clarify behavior of implicit bean archive&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The notion of Bean Archive is introduce in Chapter 12, we should do an introduction before&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-320&quot; target=&quot;_blank&quot;&gt;CDI-320&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify whether ProcessAnnotatedType should be fired for annotations&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;According to pm it shouldn’t and we should clarify this&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-318&quot; target=&quot;_blank&quot;&gt;CDI-318&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@WithAnnotations types can appear on any supertype&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Mainly Javadoc correction on @WithAnnotation&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-280&quot; target=&quot;_blank&quot;&gt;CDI-280&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;behavior of CDI bean @Specializes session bean is undefined&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;could benefit some clarification&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-220&quot; target=&quot;_blank&quot;&gt;CDI-220&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify interceptors are not associated with the result of a producer method/field&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-405&quot; target=&quot;_blank&quot;&gt;CDI-405&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reword the description of @RequestScoped and @ApplicationScoped in section 2.4.1&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-401&quot; target=&quot;_blank&quot;&gt;CDI-401&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify the meaning of &quot;bean class local view&quot;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-398&quot; target=&quot;_blank&quot;&gt;CDI-398&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify that an array with a variable component type or parameterized component type containing wildcards is not a valid bean type&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-392&quot; target=&quot;_blank&quot;&gt;CDI-392&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify when the operations of BeanManager can be called&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-386&quot; target=&quot;_blank&quot;&gt;CDI-386&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Two examples in section 5.2.4 contradict the rules of the same section&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-382&quot; target=&quot;_blank&quot;&gt;CDI-382&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify interceptors are not associated with the result of a producer method/field&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-381&quot; target=&quot;_blank&quot;&gt;CDI-381&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Additional implementations of Request Context&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;we should add general statement telling that extension can change the behavior of built-in scope&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-406&quot; target=&quot;_blank&quot;&gt;CDI-406&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Make stereotypes bean defining annotations&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-404&quot; target=&quot;_blank&quot;&gt;CDI-404&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;adding bean-defining annotations for Interceptor while setting bean-discovery-mode=&quot;annotated&quot;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot; /&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-389&quot; target=&quot;_blank&quot;&gt;CDI-389&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Revert &lt;a href=&quot;https://issues.jboss.org/browse/CDI-85&quot; target=&quot;_blank&quot;&gt;CDI-85&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;we revert to CDI 1.0 behavior but we will have to propose something better in CDI 2.0&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-397&quot; target=&quot;_blank&quot;&gt;CDI-397&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify Section 6.6.3 regarding singletons&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;we should go a little beyond and check all occurrences of &quot;singleton&quot; in the spec to clarify if it’s an singleton session bean or a singleton scope&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-411&quot; target=&quot;_blank&quot;&gt;CDI-411&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CDI conversation activation conflicts with the Servlet spec&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Solution exist at different level. We should at least put a mention in the spec and o something at impl level&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-379&quot; target=&quot;_blank&quot;&gt;CDI-379&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify life cycle of RequestScoped&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;out MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;each spec should detail how they stick to built-in scope&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-370&quot; target=&quot;_blank&quot;&gt;CDI-370&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Expand @RequestScoped and @SessionScoped to account for WebSocket&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;out MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;It’s the responsibility of Websocket spec. We should ensure they take the point before closing the ticket&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-377&quot; target=&quot;_blank&quot;&gt;CDI-77&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clarify what happens when the user creates a unbound recursive injection with Dependent scoped beans&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;out MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Container doesn’t have to support this : the ticket should be closed&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://issues.jboss.org/browse/CDI-395&quot; target=&quot;_blank&quot;&gt;CDI-395&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Public fields in extensions should not be allowed&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;out MR&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;it can bring backwards compatibility problem to correct this issue. We should see if impls allows it today. If it’s not the case it could be safely added to the MR&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
      &lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;/table&gt;
    </content>
  </entry>
</feed>
